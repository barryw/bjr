/**
 * BJR API V1
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/io.barrywalker.bjr/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/io.barrywalker.bjr/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Bjr4js);
  }
}(this, function(expect, Bjr4js) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Bjr4js.JobStat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JobStat', function() {
    it('should create an instance of JobStat', function() {
      // uncomment below and update the code to test JobStat
      //var instane = new Bjr4js.JobStat();
      //expect(instance).to.be.a(Bjr4js.JobStat);
    });

    it('should have the property runs (base name: "runs")', function() {
      // uncomment below and update the code to test the property runs
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property failed (base name: "failed")', function() {
      // uncomment below and update the code to test the property failed
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property jobCount (base name: "job_count")', function() {
      // uncomment below and update the code to test the property jobCount
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property avgRuntime (base name: "avg_runtime")', function() {
      // uncomment below and update the code to test the property avgRuntime
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property maxRuntime (base name: "max_runtime")', function() {
      // uncomment below and update the code to test the property maxRuntime
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property minRuntime (base name: "min_runtime")', function() {
      // uncomment below and update the code to test the property minRuntime
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property totalJobs (base name: "total_jobs")', function() {
      // uncomment below and update the code to test the property totalJobs
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property totalEnabled (base name: "total_enabled")', function() {
      // uncomment below and update the code to test the property totalEnabled
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property avgJobLag (base name: "avg_job_lag")', function() {
      // uncomment below and update the code to test the property avgJobLag
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property maxJobLag (base name: "max_job_lag")', function() {
      // uncomment below and update the code to test the property maxJobLag
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property minJobLag (base name: "min_job_lag")', function() {
      // uncomment below and update the code to test the property minJobLag
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property period (base name: "period")', function() {
      // uncomment below and update the code to test the property period
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property startDt (base name: "start_dt")', function() {
      // uncomment below and update the code to test the property startDt
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property endDt (base name: "end_dt")', function() {
      // uncomment below and update the code to test the property endDt
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new Bjr4js.JobStat();
      //expect(instance).to.be();
    });

  });

}));
