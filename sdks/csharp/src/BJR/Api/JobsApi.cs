/* 
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BJR.Client;
using BJR.Model;

namespace BJR.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage CreateJob (JobIn jobIn = default(JobIn));

        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> CreateJobWithHttpInfo (JobIn jobIn = default(JobIn));
        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage DeleteJob (int id);

        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> DeleteJobWithHttpInfo (int id);
        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage GetJob (int id);

        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> GetJobWithHttpInfo (int id);
        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobRunArrayMessage</returns>
        JobRunArrayMessage GetJobRuns (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string));

        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobRunArrayMessage</returns>
        ApiResponse<JobRunArrayMessage> GetJobRunsWithHttpInfo (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string));
        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>JobArrayMessage</returns>
        JobArrayMessage GetJobs (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int));

        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        ApiResponse<JobArrayMessage> GetJobsWithHttpInfo (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int));
        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>OccurrenceMessage</returns>
        OccurrenceMessage JobOccurrences (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string));

        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of OccurrenceMessage</returns>
        ApiResponse<OccurrenceMessage> JobOccurrencesWithHttpInfo (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string));
        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns></returns>
        void RunJobNow (int id);

        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunJobNowWithHttpInfo (int id);
        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage UpdateJob (int id, JobIn jobIn = default(JobIn));

        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> UpdateJobWithHttpInfo (int id, JobIn jobIn = default(JobIn));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> CreateJobAsync (JobIn jobIn = default(JobIn));

        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> CreateJobAsyncWithHttpInfo (JobIn jobIn = default(JobIn));
        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> DeleteJobAsync (int id);

        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> DeleteJobAsyncWithHttpInfo (int id);
        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> GetJobAsync (int id);

        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> GetJobAsyncWithHttpInfo (int id);
        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of JobRunArrayMessage</returns>
        System.Threading.Tasks.Task<JobRunArrayMessage> GetJobRunsAsync (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string));

        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of ApiResponse (JobRunArrayMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRunArrayMessage>> GetJobRunsAsyncWithHttpInfo (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string));
        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>Task of JobArrayMessage</returns>
        System.Threading.Tasks.Task<JobArrayMessage> GetJobsAsync (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int));

        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobArrayMessage>> GetJobsAsyncWithHttpInfo (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int));
        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of OccurrenceMessage</returns>
        System.Threading.Tasks.Task<OccurrenceMessage> JobOccurrencesAsync (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string));

        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of ApiResponse (OccurrenceMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<OccurrenceMessage>> JobOccurrencesAsyncWithHttpInfo (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string));
        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunJobNowAsync (int id);

        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunJobNowAsyncWithHttpInfo (int id);
        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> UpdateJobAsync (int id, JobIn jobIn = default(JobIn));

        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> UpdateJobAsyncWithHttpInfo (int id, JobIn jobIn = default(JobIn));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private BJR.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = new BJR.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// </summary>
        /// <returns></returns>
        public JobsApi()
        {
            this.Configuration = BJR.Client.Configuration.Default;

            ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(BJR.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BJR.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BJR.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BJR.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage CreateJob (JobIn jobIn = default(JobIn))
        {
             ApiResponse<SingleJobMessage> localVarResponse = CreateJobWithHttpInfo(jobIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public ApiResponse<SingleJobMessage> CreateJobWithHttpInfo (JobIn jobIn = default(JobIn))
        {

            var localVarPath = "/job_api";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIn != null && jobIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jobIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jobIn; // byte array
            }

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> CreateJobAsync (JobIn jobIn = default(JobIn))
        {
             ApiResponse<SingleJobMessage> localVarResponse = await CreateJobAsyncWithHttpInfo(jobIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> CreateJobAsyncWithHttpInfo (JobIn jobIn = default(JobIn))
        {

            var localVarPath = "/job_api";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIn != null && jobIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jobIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jobIn; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage DeleteJob (int id)
        {
             ApiResponse<SingleJobMessage> localVarResponse = DeleteJobWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public ApiResponse<SingleJobMessage> DeleteJobWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->DeleteJob");

            var localVarPath = "/job_api/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> DeleteJobAsync (int id)
        {
             ApiResponse<SingleJobMessage> localVarResponse = await DeleteJobAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> DeleteJobAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->DeleteJob");

            var localVarPath = "/job_api/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage GetJob (int id)
        {
             ApiResponse<SingleJobMessage> localVarResponse = GetJobWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public ApiResponse<SingleJobMessage> GetJobWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->GetJob");

            var localVarPath = "/job_api/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> GetJobAsync (int id)
        {
             ApiResponse<SingleJobMessage> localVarResponse = await GetJobAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> GetJobAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->GetJob");

            var localVarPath = "/job_api/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobRunArrayMessage</returns>
        public JobRunArrayMessage GetJobRuns (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string))
        {
             ApiResponse<JobRunArrayMessage> localVarResponse = GetJobRunsWithHttpInfo(id, perPage, page, succeeded, startDate, endDate, timezone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobRunArrayMessage</returns>
        public ApiResponse<JobRunArrayMessage> GetJobRunsWithHttpInfo (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->GetJobRuns");

            var localVarPath = "/job_api/{id}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (succeeded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded", succeeded)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRunArrayMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobRunArrayMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRunArrayMessage)));
        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of JobRunArrayMessage</returns>
        public async System.Threading.Tasks.Task<JobRunArrayMessage> GetJobRunsAsync (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string))
        {
             ApiResponse<JobRunArrayMessage> localVarResponse = await GetJobRunsAsyncWithHttpInfo(id, perPage, page, succeeded, startDate, endDate, timezone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of ApiResponse (JobRunArrayMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobRunArrayMessage>> GetJobRunsAsyncWithHttpInfo (int id, int perPage = default(int), int page = default(int), bool succeeded = default(bool), string startDate = default(string), string endDate = default(string), string timezone = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->GetJobRuns");

            var localVarPath = "/job_api/{id}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (succeeded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded", succeeded)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobRunArrayMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobRunArrayMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobRunArrayMessage)));
        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>JobArrayMessage</returns>
        public JobArrayMessage GetJobs (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int))
        {
             ApiResponse<JobArrayMessage> localVarResponse = GetJobsWithHttpInfo(tags, incexc, startDate, endDate, enabled, succeeded, running, name, searchTimezone, command, timezone, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        public ApiResponse<JobArrayMessage> GetJobsWithHttpInfo (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int))
        {

            var localVarPath = "/job_api";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (incexc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incexc", incexc)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (succeeded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded", succeeded)); // query parameter
            if (running != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "running", running)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (searchTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_timezone", searchTimezone)); // query parameter
            if (command != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "command", command)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobArrayMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobArrayMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobArrayMessage)));
        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>Task of JobArrayMessage</returns>
        public async System.Threading.Tasks.Task<JobArrayMessage> GetJobsAsync (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int))
        {
             ApiResponse<JobArrayMessage> localVarResponse = await GetJobsAsyncWithHttpInfo(tags, incexc, startDate, endDate, enabled, succeeded, running, name, searchTimezone, command, timezone, perPage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tags">Specify a comma-separated list of tags to search jobs by. (optional)</param>
        /// <param name="incexc"> (optional)</param>
        /// <param name="startDate">Specify a start date to search jobs by. (optional)</param>
        /// <param name="endDate">Specify an end date to search jobs by. (optional)</param>
        /// <param name="enabled">Search on whether a job is enabled or not. (optional)</param>
        /// <param name="succeeded">Search on whether a job&#39;s last run was successful or not. (optional)</param>
        /// <param name="running">Search on whether a job is currently running or not. (optional)</param>
        /// <param name="name">Search on a job&#39;s name. (optional)</param>
        /// <param name="searchTimezone">Search for jobs in a timezone. (optional)</param>
        /// <param name="command">Search for jobs by the command that they execute. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobArrayMessage>> GetJobsAsyncWithHttpInfo (string tags = default(string), string incexc = default(string), string startDate = default(string), string endDate = default(string), bool enabled = default(bool), bool succeeded = default(bool), bool running = default(bool), string name = default(string), string searchTimezone = default(string), string command = default(string), string timezone = default(string), int perPage = default(int), int page = default(int))
        {

            var localVarPath = "/job_api";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (incexc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incexc", incexc)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (succeeded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded", succeeded)); // query parameter
            if (running != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "running", running)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (searchTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_timezone", searchTimezone)); // query parameter
            if (command != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "command", command)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobArrayMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobArrayMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobArrayMessage)));
        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>OccurrenceMessage</returns>
        public OccurrenceMessage JobOccurrences (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string))
        {
             ApiResponse<OccurrenceMessage> localVarResponse = JobOccurrencesWithHttpInfo(id, endDate, perPage, page, timezone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of OccurrenceMessage</returns>
        public ApiResponse<OccurrenceMessage> JobOccurrencesWithHttpInfo (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobOccurrences");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling JobsApi->JobOccurrences");

            var localVarPath = "/job_api/{id}/occurrences/{end_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (endDate != null) localVarPathParams.Add("end_date", this.Configuration.ApiClient.ParameterToString(endDate)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobOccurrences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OccurrenceMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OccurrenceMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OccurrenceMessage)));
        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of OccurrenceMessage</returns>
        public async System.Threading.Tasks.Task<OccurrenceMessage> JobOccurrencesAsync (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string))
        {
             ApiResponse<OccurrenceMessage> localVarResponse = await JobOccurrencesAsyncWithHttpInfo(id, endDate, perPage, page, timezone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>Task of ApiResponse (OccurrenceMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OccurrenceMessage>> JobOccurrencesAsyncWithHttpInfo (int id, string endDate, int perPage = default(int), int page = default(int), string timezone = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobOccurrences");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling JobsApi->JobOccurrences");

            var localVarPath = "/job_api/{id}/occurrences/{end_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (endDate != null) localVarPathParams.Add("end_date", this.Configuration.ApiClient.ParameterToString(endDate)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobOccurrences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OccurrenceMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OccurrenceMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OccurrenceMessage)));
        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns></returns>
        public void RunJobNow (int id)
        {
             RunJobNowWithHttpInfo(id);
        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RunJobNowWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->RunJobNow");

            var localVarPath = "/job_api/{id}/run_now";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunJobNow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunJobNowAsync (int id)
        {
             await RunJobNowAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RunJobNowAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->RunJobNow");

            var localVarPath = "/job_api/{id}/run_now";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunJobNow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage UpdateJob (int id, JobIn jobIn = default(JobIn))
        {
             ApiResponse<SingleJobMessage> localVarResponse = UpdateJobWithHttpInfo(id, jobIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public ApiResponse<SingleJobMessage> UpdateJobWithHttpInfo (int id, JobIn jobIn = default(JobIn))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->UpdateJob");

            var localVarPath = "/job_api/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jobIn != null && jobIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jobIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jobIn; // byte array
            }

            // authentication (bearerAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> UpdateJobAsync (int id, JobIn jobIn = default(JobIn))
        {
             ApiResponse<SingleJobMessage> localVarResponse = await UpdateJobAsyncWithHttpInfo(id, jobIn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> UpdateJobAsyncWithHttpInfo (int id, JobIn jobIn = default(JobIn))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->UpdateJob");

            var localVarPath = "/job_api/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jobIn != null && jobIn.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jobIn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jobIn; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleJobMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleJobMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleJobMessage)));
        }

    }
}
