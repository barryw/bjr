/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BJR.Client.OpenAPIDateConverter;

namespace BJR.Model
{
    /// <summary>
    /// BusyThreadCountMessageObject
    /// </summary>
    [DataContract]
    public partial class BusyThreadCountMessageObject :  IEquatable<BusyThreadCountMessageObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusyThreadCountMessageObject" /> class.
        /// </summary>
        /// <param name="totalBusy">The total number of busy workers across all pods/hosts..</param>
        /// <param name="hosts">hosts.</param>
        public BusyThreadCountMessageObject(int totalBusy = default(int), List<BusyThreadCountMessageObjectHosts> hosts = default(List<BusyThreadCountMessageObjectHosts>))
        {
            this.TotalBusy = totalBusy;
            this.Hosts = hosts;
        }

        /// <summary>
        /// The total number of busy workers across all pods/hosts.
        /// </summary>
        /// <value>The total number of busy workers across all pods/hosts.</value>
        [DataMember(Name="total_busy", EmitDefaultValue=false)]
        public int TotalBusy { get; set; }

        /// <summary>
        /// Gets or Sets Hosts
        /// </summary>
        [DataMember(Name="hosts", EmitDefaultValue=false)]
        public List<BusyThreadCountMessageObjectHosts> Hosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusyThreadCountMessageObject {\n");
            sb.Append("  TotalBusy: ").Append(TotalBusy).Append("\n");
            sb.Append("  Hosts: ").Append(Hosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusyThreadCountMessageObject);
        }

        /// <summary>
        /// Returns true if BusyThreadCountMessageObject instances are equal
        /// </summary>
        /// <param name="input">Instance of BusyThreadCountMessageObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusyThreadCountMessageObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalBusy == input.TotalBusy ||
                    (this.TotalBusy != null &&
                    this.TotalBusy.Equals(input.TotalBusy))
                ) && 
                (
                    this.Hosts == input.Hosts ||
                    this.Hosts != null &&
                    input.Hosts != null &&
                    this.Hosts.SequenceEqual(input.Hosts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalBusy != null)
                    hashCode = hashCode * 59 + this.TotalBusy.GetHashCode();
                if (this.Hosts != null)
                    hashCode = hashCode * 59 + this.Hosts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
