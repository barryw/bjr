/* 
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BJR.Client.OpenAPIDateConverter;

namespace BJR.Model
{
    /// <summary>
    /// JobsPerDayObject
    /// </summary>
    [DataContract]
    public partial class JobsPerDayObject :  IEquatable<JobsPerDayObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobsPerDayObject" /> class.
        /// </summary>
        /// <param name="date">The date the counts are for..</param>
        /// <param name="processed">The total number of jobs that were processed for the day..</param>
        /// <param name="failed">The total number of jobs that failed for the day..</param>
        public JobsPerDayObject(string date = default(string), int processed = default(int), int failed = default(int))
        {
            this.Date = date;
            this.Processed = processed;
            this.Failed = failed;
        }
        
        /// <summary>
        /// The date the counts are for.
        /// </summary>
        /// <value>The date the counts are for.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// The total number of jobs that were processed for the day.
        /// </summary>
        /// <value>The total number of jobs that were processed for the day.</value>
        [DataMember(Name="processed", EmitDefaultValue=false)]
        public int Processed { get; set; }

        /// <summary>
        /// The total number of jobs that failed for the day.
        /// </summary>
        /// <value>The total number of jobs that failed for the day.</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public int Failed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobsPerDayObject {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobsPerDayObject);
        }

        /// <summary>
        /// Returns true if JobsPerDayObject instances are equal
        /// </summary>
        /// <param name="input">Instance of JobsPerDayObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobsPerDayObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Processed == input.Processed ||
                    (this.Processed != null &&
                    this.Processed.Equals(input.Processed))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Processed != null)
                    hashCode = hashCode * 59 + this.Processed.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
