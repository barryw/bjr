/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BJR.Client;
using BJR.Api;
using BJR.Model;

namespace BJR.Test
{
    /// <summary>
    ///  Class for testing JobsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class JobsApiTests
    {
        private JobsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new JobsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of JobsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' JobsApi
            //Assert.IsInstanceOf(typeof(JobsApi), instance);
        }

        
        /// <summary>
        /// Test CreateJob
        /// </summary>
        [Test]
        public void CreateJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobIn jobIn = null;
            //var response = instance.CreateJob(jobIn);
            //Assert.IsInstanceOf(typeof(SingleJobMessage), response, "response is SingleJobMessage");
        }
        
        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Test]
        public void DeleteJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.DeleteJob(id);
            //Assert.IsInstanceOf(typeof(SingleJobMessage), response, "response is SingleJobMessage");
        }
        
        /// <summary>
        /// Test GetJob
        /// </summary>
        [Test]
        public void GetJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetJob(id);
            //Assert.IsInstanceOf(typeof(SingleJobMessage), response, "response is SingleJobMessage");
        }
        
        /// <summary>
        /// Test GetJobRuns
        /// </summary>
        [Test]
        public void GetJobRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? perPage = null;
            //int? page = null;
            //bool? succeeded = null;
            //string startDate = null;
            //string endDate = null;
            //string timezone = null;
            //var response = instance.GetJobRuns(id, perPage, page, succeeded, startDate, endDate, timezone);
            //Assert.IsInstanceOf(typeof(JobRunArrayMessage), response, "response is JobRunArrayMessage");
        }
        
        /// <summary>
        /// Test GetJobs
        /// </summary>
        [Test]
        public void GetJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expression = null;
            //string timezone = null;
            //int? perPage = null;
            //int? page = null;
            //var response = instance.GetJobs(expression, timezone, perPage, page);
            //Assert.IsInstanceOf(typeof(JobArrayMessage), response, "response is JobArrayMessage");
        }
        
        /// <summary>
        /// Test JobOccurrences
        /// </summary>
        [Test]
        public void JobOccurrencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string endDate = null;
            //int? perPage = null;
            //int? page = null;
            //string timezone = null;
            //var response = instance.JobOccurrences(id, endDate, perPage, page, timezone);
            //Assert.IsInstanceOf(typeof(OccurrenceMessage), response, "response is OccurrenceMessage");
        }
        
        /// <summary>
        /// Test RunJobNow
        /// </summary>
        [Test]
        public void RunJobNowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.RunJobNow(id);
            
        }
        
        /// <summary>
        /// Test UpdateJob
        /// </summary>
        [Test]
        public void UpdateJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //JobIn jobIn = null;
            //var response = instance.UpdateJob(id, jobIn);
            //Assert.IsInstanceOf(typeof(SingleJobMessage), response, "response is SingleJobMessage");
        }
        
    }

}
