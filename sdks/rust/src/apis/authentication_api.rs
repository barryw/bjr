/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct AuthenticationApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AuthenticationApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AuthenticationApiClient<C> {
        AuthenticationApiClient {
            configuration,
        }
    }
}

pub trait AuthenticationApi {
    fn authenticate_user(&self, auth_in: Option<crate::models::AuthIn>) -> Box<dyn Future<Item = crate::models::AuthOut, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>AuthenticationApi for AuthenticationApiClient<C> {
    fn authenticate_user(&self, auth_in: Option<crate::models::AuthIn>) -> Box<dyn Future<Item = crate::models::AuthOut, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/authenticate".to_string())
        ;
        req = req.with_body_param(auth_in);

        req.execute(self.configuration.borrow())
    }

}
