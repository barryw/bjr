/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct UsersApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> UsersApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> UsersApiClient<C> {
        UsersApiClient {
            configuration,
        }
    }
}

pub trait UsersApi {
    fn create_user(&self, user_new_in: Option<crate::models::UserNewIn>) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>>;
    fn delete_user(&self, id: i32) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>>;
    fn get_user(&self, id: i32) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>>;
    fn get_users(&self, per_page: Option<i32>, page: Option<i32>) -> Box<dyn Future<Item = crate::models::UserArrayMessage, Error = Error<serde_json::Value>>>;
    fn update_user(&self, id: i32, user_update_in: Option<crate::models::UserUpdateIn>) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>UsersApi for UsersApiClient<C> {
    fn create_user(&self, user_new_in: Option<crate::models::UserNewIn>) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/user_api".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(user_new_in);

        req.execute(self.configuration.borrow())
    }

    fn delete_user(&self, id: i32) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/user_api/{id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_user(&self, id: i32) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/user_api/{id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_users(&self, per_page: Option<i32>, page: Option<i32>) -> Box<dyn Future<Item = crate::models::UserArrayMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/user_api".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn update_user(&self, id: i32, user_update_in: Option<crate::models::UserUpdateIn>) -> Box<dyn Future<Item = crate::models::SingleUserMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/user_api/{id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(user_update_in);

        req.execute(self.configuration.borrow())
    }

}
