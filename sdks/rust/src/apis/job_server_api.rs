/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct JobServerApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> JobServerApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> JobServerApiClient<C> {
        JobServerApiClient {
            configuration,
        }
    }
}

pub trait JobServerApi {
    fn get_busy_thread_count(&self, ) -> Box<dyn Future<Item = crate::models::BusyThreadCountMessage, Error = Error<serde_json::Value>>>;
    fn quiesce_node(&self, host: &str) -> Box<dyn Future<Item = crate::models::GenericMessage, Error = Error<serde_json::Value>>>;
    fn recent_jobs(&self, count: Option<i32>) -> Box<dyn Future<Item = crate::models::JobArrayMessage, Error = Error<serde_json::Value>>>;
    fn stats_by_day(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>>;
    fn stats_by_hour(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>>;
    fn stats_by_minute(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>>;
    fn stats_by_week(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>>;
    fn todays_stats(&self, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::TodaysStatsMessage, Error = Error<serde_json::Value>>>;
    fn upcoming_jobs(&self, count: Option<i32>) -> Box<dyn Future<Item = crate::models::JobArrayMessage, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>JobServerApi for JobServerApiClient<C> {
    fn get_busy_thread_count(&self, ) -> Box<dyn Future<Item = crate::models::BusyThreadCountMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/busy_thread_count".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn quiesce_node(&self, host: &str) -> Box<dyn Future<Item = crate::models::GenericMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/job_server_api/quiesce_worker".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("host".to_string(), host.to_string());

        req.execute(self.configuration.borrow())
    }

    fn recent_jobs(&self, count: Option<i32>) -> Box<dyn Future<Item = crate::models::JobArrayMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/recent_jobs".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = count {
            req = req.with_query_param("count".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn stats_by_day(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/daily_job_stats".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = start_date {
            req = req.with_query_param("start_date".to_string(), s.to_string());
        }
        if let Some(ref s) = end_date {
            req = req.with_query_param("end_date".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = timezone {
            req = req.with_query_param("timezone".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn stats_by_hour(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/hourly_job_stats".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = start_date {
            req = req.with_query_param("start_date".to_string(), s.to_string());
        }
        if let Some(ref s) = end_date {
            req = req.with_query_param("end_date".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = timezone {
            req = req.with_query_param("timezone".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn stats_by_minute(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/minutely_job_stats".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = start_date {
            req = req.with_query_param("start_date".to_string(), s.to_string());
        }
        if let Some(ref s) = end_date {
            req = req.with_query_param("end_date".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = timezone {
            req = req.with_query_param("timezone".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn stats_by_week(&self, start_date: Option<&str>, end_date: Option<&str>, per_page: Option<i32>, page: Option<i32>, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::JobStatMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/weekly_job_stats".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = start_date {
            req = req.with_query_param("start_date".to_string(), s.to_string());
        }
        if let Some(ref s) = end_date {
            req = req.with_query_param("end_date".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = timezone {
            req = req.with_query_param("timezone".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn todays_stats(&self, timezone: Option<&str>) -> Box<dyn Future<Item = crate::models::TodaysStatsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/todays_stats".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = timezone {
            req = req.with_query_param("timezone".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn upcoming_jobs(&self, count: Option<i32>) -> Box<dyn Future<Item = crate::models::JobArrayMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/job_server_api/upcoming_jobs".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = count {
            req = req.with_query_param("count".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
