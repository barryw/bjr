/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SingleJobRun {
    /// The object's primary key. This uniquely identifies the object in the system.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Whether the run was successful or not.
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<bool>,
    /// The return code that the command exited with. 0 means success.
    #[serde(rename = "return_code", skip_serializing_if = "Option::is_none")]
    pub return_code: Option<i32>,
    /// If the run failed, the error message that was returned.
    #[serde(rename = "error_message", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    /// The text written to STDOUT as part of the job.
    #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
    pub stdout: Option<String>,
    /// The text written to STDERR as part of the job.
    #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
    pub stderr: Option<String>,
    /// The date and time that the run started.
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The date and time that the run ended.
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The date and time that the job should have run.
    #[serde(rename = "scheduled_start_time", skip_serializing_if = "Option::is_none")]
    pub scheduled_start_time: Option<String>,
    /// The difference in seconds between when the job was scheduled to run and when it ran.
    #[serde(rename = "schedule_diff_in_seconds", skip_serializing_if = "Option::is_none")]
    pub schedule_diff_in_seconds: Option<i32>,
    /// The job that the run is associated with.
    #[serde(rename = "job_id", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i32>,
    /// True if the job was run manually as opposed to run on a schedule.
    #[serde(rename = "is_manual", skip_serializing_if = "Option::is_none")]
    pub is_manual: Option<bool>,
    /// The date and time that the run record was created in UTC.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The date and time that the run record was last updated in UTC.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl SingleJobRun {
    pub fn new() -> SingleJobRun {
        SingleJobRun {
            id: None,
            success: None,
            return_code: None,
            error_message: None,
            stdout: None,
            stderr: None,
            start_time: None,
            end_time: None,
            scheduled_start_time: None,
            schedule_diff_in_seconds: None,
            job_id: None,
            is_manual: None,
            created_at: None,
            updated_at: None,
        }
    }
}


