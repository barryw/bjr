/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SingleJob {
    /// The object's primary key. This uniquely identifies the object in the system.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The name of the job.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The cron expression for the job.
    #[serde(rename = "cron", skip_serializing_if = "Option::is_none")]
    pub cron: Option<String>,
    /// Whether the job is enabled or not.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The command that is executed when the job fires.
    #[serde(rename = "command", skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    /// The last time the job ran.
    #[serde(rename = "last_run", skip_serializing_if = "Option::is_none")]
    pub last_run: Option<String>,
    /// The date and time of the job's next run.
    #[serde(rename = "next_run", skip_serializing_if = "Option::is_none")]
    pub next_run: Option<String>,
    /// Whether the last run of the job was successful.
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<bool>,
    /// Whether the job is currently running.
    #[serde(rename = "running", skip_serializing_if = "Option::is_none")]
    pub running: Option<bool>,
    /// The timezone that the job will run in.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// An array of tags associated with the job.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The UTC date and time that the object was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The UTC date and time that the object was last modified.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// This url will receive a POST request with details about all successful job runs.
    #[serde(rename = "success_callback", skip_serializing_if = "Option::is_none")]
    pub success_callback: Option<String>,
    /// This url will receive a POST request with details about all unsuccessful job runs.
    #[serde(rename = "failure_callback", skip_serializing_if = "Option::is_none")]
    pub failure_callback: Option<String>,
    /// The average runtime across all runs of this job.
    #[serde(rename = "avg_run_duration", skip_serializing_if = "Option::is_none")]
    pub avg_run_duration: Option<f32>,
    /// The maximum runtime across all runs of this job.
    #[serde(rename = "max_run_duration", skip_serializing_if = "Option::is_none")]
    pub max_run_duration: Option<f32>,
    /// The minimum runtime across all runs of this job.
    #[serde(rename = "min_run_duration", skip_serializing_if = "Option::is_none")]
    pub min_run_duration: Option<f32>,
    /// The average runtime trend across all runs of this job.
    #[serde(rename = "avg_run_duration_trend", skip_serializing_if = "Option::is_none")]
    pub avg_run_duration_trend: Option<f32>,
    /// The average job lag across all runs of this job.
    #[serde(rename = "avg_run_lag", skip_serializing_if = "Option::is_none")]
    pub avg_run_lag: Option<f32>,
    /// The maximum job lag across all runs of this job.
    #[serde(rename = "max_run_lag", skip_serializing_if = "Option::is_none")]
    pub max_run_lag: Option<f32>,
    /// The minimum job lag across all runs of this job.
    #[serde(rename = "min_run_lag", skip_serializing_if = "Option::is_none")]
    pub min_run_lag: Option<f32>,
    /// The average job lag trend across all runs of this job.
    #[serde(rename = "avg_run_lag_trend", skip_serializing_if = "Option::is_none")]
    pub avg_run_lag_trend: Option<f32>,
}

impl SingleJob {
    pub fn new() -> SingleJob {
        SingleJob {
            id: None,
            name: None,
            cron: None,
            enabled: None,
            command: None,
            last_run: None,
            next_run: None,
            success: None,
            running: None,
            timezone: None,
            tags: None,
            created_at: None,
            updated_at: None,
            success_callback: None,
            failure_callback: None,
            avg_run_duration: None,
            max_run_duration: None,
            min_run_duration: None,
            avg_run_duration_trend: None,
            avg_run_lag: None,
            max_run_lag: None,
            min_run_lag: None,
            avg_run_lag_trend: None,
        }
    }
}


