/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BJR

import (
	"encoding/json"
)

// SingleFolder struct for SingleFolder
type SingleFolder struct {
	// The object's primary key. This uniquely identifies the object in the system.
	Id *int32 `json:"id,omitempty"`
	// The folder's name. Must be unique.
	Name *string `json:"name,omitempty"`
	// The search expression used to determine which jobs appear in this folder.
	Expression *string `json:"expression,omitempty"`
	// The number of jobs that match the folder's expression.
	JobCount *int32 `json:"job_count,omitempty"`
}

// NewSingleFolder instantiates a new SingleFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleFolder() *SingleFolder {
	this := SingleFolder{}
	return &this
}

// NewSingleFolderWithDefaults instantiates a new SingleFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleFolderWithDefaults() *SingleFolder {
	this := SingleFolder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SingleFolder) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleFolder) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SingleFolder) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SingleFolder) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SingleFolder) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleFolder) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SingleFolder) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SingleFolder) SetName(v string) {
	o.Name = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *SingleFolder) GetExpression() string {
	if o == nil || o.Expression == nil {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleFolder) GetExpressionOk() (*string, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *SingleFolder) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *SingleFolder) SetExpression(v string) {
	o.Expression = &v
}

// GetJobCount returns the JobCount field value if set, zero value otherwise.
func (o *SingleFolder) GetJobCount() int32 {
	if o == nil || o.JobCount == nil {
		var ret int32
		return ret
	}
	return *o.JobCount
}

// GetJobCountOk returns a tuple with the JobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleFolder) GetJobCountOk() (*int32, bool) {
	if o == nil || o.JobCount == nil {
		return nil, false
	}
	return o.JobCount, true
}

// HasJobCount returns a boolean if a field has been set.
func (o *SingleFolder) HasJobCount() bool {
	if o != nil && o.JobCount != nil {
		return true
	}

	return false
}

// SetJobCount gets a reference to the given int32 and assigns it to the JobCount field.
func (o *SingleFolder) SetJobCount(v int32) {
	o.JobCount = &v
}

func (o SingleFolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if o.JobCount != nil {
		toSerialize["job_count"] = o.JobCount
	}
	return json.Marshal(toSerialize)
}

type NullableSingleFolder struct {
	value *SingleFolder
	isSet bool
}

func (v NullableSingleFolder) Get() *SingleFolder {
	return v.value
}

func (v *NullableSingleFolder) Set(val *SingleFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleFolder(val *SingleFolder) *NullableSingleFolder {
	return &NullableSingleFolder{value: val, isSet: true}
}

func (v NullableSingleFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


