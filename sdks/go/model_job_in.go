/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BJR

import (
	"encoding/json"
)

// JobIn struct for JobIn
type JobIn struct {
	// The new name of the job. Must be unique.
	Name string `json:"name"`
	// The new cron expression for the job.
	Cron string `json:"cron"`
	// The command to run when the job fires.
	Command string `json:"command"`
	// The timezone to run the job in.
	Timezone *string `json:"timezone,omitempty"`
	// Is the job enabled by default?
	Enabled *bool `json:"enabled,omitempty"`
	// A comma-separated list of tags to associate with this job. You can search jobs by their tags.
	Tags *string `json:"tags,omitempty"`
	// Specify the url to receive a POST callback for all successful runs of this job.
	SuccessCallback *string `json:"success_callback,omitempty"`
	// Specify the url to receive a POST callback for all unsuccessful runs of this job.
	FailureCallback *string `json:"failure_callback,omitempty"`
}

// NewJobIn instantiates a new JobIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobIn(name string, cron string, command string) *JobIn {
	this := JobIn{}
	this.Name = name
	this.Cron = cron
	this.Command = command
	return &this
}

// NewJobInWithDefaults instantiates a new JobIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobInWithDefaults() *JobIn {
	this := JobIn{}
	return &this
}

// GetName returns the Name field value
func (o *JobIn) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JobIn) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JobIn) SetName(v string) {
	o.Name = v
}

// GetCron returns the Cron field value
func (o *JobIn) GetCron() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cron
}

// GetCronOk returns a tuple with the Cron field value
// and a boolean to check if the value has been set.
func (o *JobIn) GetCronOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cron, true
}

// SetCron sets field value
func (o *JobIn) SetCron(v string) {
	o.Cron = v
}

// GetCommand returns the Command field value
func (o *JobIn) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *JobIn) GetCommandOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *JobIn) SetCommand(v string) {
	o.Command = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *JobIn) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *JobIn) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *JobIn) SetTimezone(v string) {
	o.Timezone = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *JobIn) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *JobIn) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *JobIn) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *JobIn) GetTags() string {
	if o == nil || o.Tags == nil {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetTagsOk() (*string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *JobIn) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *JobIn) SetTags(v string) {
	o.Tags = &v
}

// GetSuccessCallback returns the SuccessCallback field value if set, zero value otherwise.
func (o *JobIn) GetSuccessCallback() string {
	if o == nil || o.SuccessCallback == nil {
		var ret string
		return ret
	}
	return *o.SuccessCallback
}

// GetSuccessCallbackOk returns a tuple with the SuccessCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetSuccessCallbackOk() (*string, bool) {
	if o == nil || o.SuccessCallback == nil {
		return nil, false
	}
	return o.SuccessCallback, true
}

// HasSuccessCallback returns a boolean if a field has been set.
func (o *JobIn) HasSuccessCallback() bool {
	if o != nil && o.SuccessCallback != nil {
		return true
	}

	return false
}

// SetSuccessCallback gets a reference to the given string and assigns it to the SuccessCallback field.
func (o *JobIn) SetSuccessCallback(v string) {
	o.SuccessCallback = &v
}

// GetFailureCallback returns the FailureCallback field value if set, zero value otherwise.
func (o *JobIn) GetFailureCallback() string {
	if o == nil || o.FailureCallback == nil {
		var ret string
		return ret
	}
	return *o.FailureCallback
}

// GetFailureCallbackOk returns a tuple with the FailureCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetFailureCallbackOk() (*string, bool) {
	if o == nil || o.FailureCallback == nil {
		return nil, false
	}
	return o.FailureCallback, true
}

// HasFailureCallback returns a boolean if a field has been set.
func (o *JobIn) HasFailureCallback() bool {
	if o != nil && o.FailureCallback != nil {
		return true
	}

	return false
}

// SetFailureCallback gets a reference to the given string and assigns it to the FailureCallback field.
func (o *JobIn) SetFailureCallback(v string) {
	o.FailureCallback = &v
}

func (o JobIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["cron"] = o.Cron
	}
	if true {
		toSerialize["command"] = o.Command
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.SuccessCallback != nil {
		toSerialize["success_callback"] = o.SuccessCallback
	}
	if o.FailureCallback != nil {
		toSerialize["failure_callback"] = o.FailureCallback
	}
	return json.Marshal(toSerialize)
}

type NullableJobIn struct {
	value *JobIn
	isSet bool
}

func (v NullableJobIn) Get() *JobIn {
	return v.value
}

func (v *NullableJobIn) Set(val *JobIn) {
	v.value = val
	v.isSet = true
}

func (v NullableJobIn) IsSet() bool {
	return v.isSet
}

func (v *NullableJobIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobIn(val *JobIn) *NullableJobIn {
	return &NullableJobIn{value: val, isSet: true}
}

func (v NullableJobIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


