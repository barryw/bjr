/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BJR

import (
	"encoding/json"
	"time"
)

// JobStat struct for JobStat
type JobStat struct {
	// The number of job runs in the period.
	Runs *int32 `json:"runs,omitempty"`
	// The number of job runs that failed in the period.
	Failed *int32 `json:"failed,omitempty"`
	// The number of jobs that executed in the period.
	JobCount *int32 `json:"job_count,omitempty"`
	// The average runtime in seconds of all jobs in the period.
	AvgRuntime *float32 `json:"avg_runtime,omitempty"`
	// The max runtime in seconds of all jobs in the period.
	MaxRuntime *float32 `json:"max_runtime,omitempty"`
	// The min runtime in seconds of all jobs in the period.
	MinRuntime *float32 `json:"min_runtime,omitempty"`
	// The total number of jobs.
	TotalJobs *int32 `json:"total_jobs,omitempty"`
	// Of the total number of jobs, this is how many were enabled.
	TotalEnabled *int32 `json:"total_enabled,omitempty"`
	// The average job lag in seconds.
	AvgJobLag *float32 `json:"avg_job_lag,omitempty"`
	// The maximum job lag in seconds.
	MaxJobLag *int32 `json:"max_job_lag,omitempty"`
	// The minimum job lag in seconds.
	MinJobLag *int32 `json:"min_job_lag,omitempty"`
	// The runtime period.
	Period *string `json:"period,omitempty"`
	// The period start date.
	StartDt *time.Time `json:"start_dt,omitempty"`
	// The period end date.
	EndDt *time.Time `json:"end_dt,omitempty"`
	// The date the record was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date the record was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewJobStat instantiates a new JobStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobStat() *JobStat {
	this := JobStat{}
	return &this
}

// NewJobStatWithDefaults instantiates a new JobStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobStatWithDefaults() *JobStat {
	this := JobStat{}
	return &this
}

// GetRuns returns the Runs field value if set, zero value otherwise.
func (o *JobStat) GetRuns() int32 {
	if o == nil || o.Runs == nil {
		var ret int32
		return ret
	}
	return *o.Runs
}

// GetRunsOk returns a tuple with the Runs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetRunsOk() (*int32, bool) {
	if o == nil || o.Runs == nil {
		return nil, false
	}
	return o.Runs, true
}

// HasRuns returns a boolean if a field has been set.
func (o *JobStat) HasRuns() bool {
	if o != nil && o.Runs != nil {
		return true
	}

	return false
}

// SetRuns gets a reference to the given int32 and assigns it to the Runs field.
func (o *JobStat) SetRuns(v int32) {
	o.Runs = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *JobStat) GetFailed() int32 {
	if o == nil || o.Failed == nil {
		var ret int32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetFailedOk() (*int32, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *JobStat) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int32 and assigns it to the Failed field.
func (o *JobStat) SetFailed(v int32) {
	o.Failed = &v
}

// GetJobCount returns the JobCount field value if set, zero value otherwise.
func (o *JobStat) GetJobCount() int32 {
	if o == nil || o.JobCount == nil {
		var ret int32
		return ret
	}
	return *o.JobCount
}

// GetJobCountOk returns a tuple with the JobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetJobCountOk() (*int32, bool) {
	if o == nil || o.JobCount == nil {
		return nil, false
	}
	return o.JobCount, true
}

// HasJobCount returns a boolean if a field has been set.
func (o *JobStat) HasJobCount() bool {
	if o != nil && o.JobCount != nil {
		return true
	}

	return false
}

// SetJobCount gets a reference to the given int32 and assigns it to the JobCount field.
func (o *JobStat) SetJobCount(v int32) {
	o.JobCount = &v
}

// GetAvgRuntime returns the AvgRuntime field value if set, zero value otherwise.
func (o *JobStat) GetAvgRuntime() float32 {
	if o == nil || o.AvgRuntime == nil {
		var ret float32
		return ret
	}
	return *o.AvgRuntime
}

// GetAvgRuntimeOk returns a tuple with the AvgRuntime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetAvgRuntimeOk() (*float32, bool) {
	if o == nil || o.AvgRuntime == nil {
		return nil, false
	}
	return o.AvgRuntime, true
}

// HasAvgRuntime returns a boolean if a field has been set.
func (o *JobStat) HasAvgRuntime() bool {
	if o != nil && o.AvgRuntime != nil {
		return true
	}

	return false
}

// SetAvgRuntime gets a reference to the given float32 and assigns it to the AvgRuntime field.
func (o *JobStat) SetAvgRuntime(v float32) {
	o.AvgRuntime = &v
}

// GetMaxRuntime returns the MaxRuntime field value if set, zero value otherwise.
func (o *JobStat) GetMaxRuntime() float32 {
	if o == nil || o.MaxRuntime == nil {
		var ret float32
		return ret
	}
	return *o.MaxRuntime
}

// GetMaxRuntimeOk returns a tuple with the MaxRuntime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetMaxRuntimeOk() (*float32, bool) {
	if o == nil || o.MaxRuntime == nil {
		return nil, false
	}
	return o.MaxRuntime, true
}

// HasMaxRuntime returns a boolean if a field has been set.
func (o *JobStat) HasMaxRuntime() bool {
	if o != nil && o.MaxRuntime != nil {
		return true
	}

	return false
}

// SetMaxRuntime gets a reference to the given float32 and assigns it to the MaxRuntime field.
func (o *JobStat) SetMaxRuntime(v float32) {
	o.MaxRuntime = &v
}

// GetMinRuntime returns the MinRuntime field value if set, zero value otherwise.
func (o *JobStat) GetMinRuntime() float32 {
	if o == nil || o.MinRuntime == nil {
		var ret float32
		return ret
	}
	return *o.MinRuntime
}

// GetMinRuntimeOk returns a tuple with the MinRuntime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetMinRuntimeOk() (*float32, bool) {
	if o == nil || o.MinRuntime == nil {
		return nil, false
	}
	return o.MinRuntime, true
}

// HasMinRuntime returns a boolean if a field has been set.
func (o *JobStat) HasMinRuntime() bool {
	if o != nil && o.MinRuntime != nil {
		return true
	}

	return false
}

// SetMinRuntime gets a reference to the given float32 and assigns it to the MinRuntime field.
func (o *JobStat) SetMinRuntime(v float32) {
	o.MinRuntime = &v
}

// GetTotalJobs returns the TotalJobs field value if set, zero value otherwise.
func (o *JobStat) GetTotalJobs() int32 {
	if o == nil || o.TotalJobs == nil {
		var ret int32
		return ret
	}
	return *o.TotalJobs
}

// GetTotalJobsOk returns a tuple with the TotalJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetTotalJobsOk() (*int32, bool) {
	if o == nil || o.TotalJobs == nil {
		return nil, false
	}
	return o.TotalJobs, true
}

// HasTotalJobs returns a boolean if a field has been set.
func (o *JobStat) HasTotalJobs() bool {
	if o != nil && o.TotalJobs != nil {
		return true
	}

	return false
}

// SetTotalJobs gets a reference to the given int32 and assigns it to the TotalJobs field.
func (o *JobStat) SetTotalJobs(v int32) {
	o.TotalJobs = &v
}

// GetTotalEnabled returns the TotalEnabled field value if set, zero value otherwise.
func (o *JobStat) GetTotalEnabled() int32 {
	if o == nil || o.TotalEnabled == nil {
		var ret int32
		return ret
	}
	return *o.TotalEnabled
}

// GetTotalEnabledOk returns a tuple with the TotalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetTotalEnabledOk() (*int32, bool) {
	if o == nil || o.TotalEnabled == nil {
		return nil, false
	}
	return o.TotalEnabled, true
}

// HasTotalEnabled returns a boolean if a field has been set.
func (o *JobStat) HasTotalEnabled() bool {
	if o != nil && o.TotalEnabled != nil {
		return true
	}

	return false
}

// SetTotalEnabled gets a reference to the given int32 and assigns it to the TotalEnabled field.
func (o *JobStat) SetTotalEnabled(v int32) {
	o.TotalEnabled = &v
}

// GetAvgJobLag returns the AvgJobLag field value if set, zero value otherwise.
func (o *JobStat) GetAvgJobLag() float32 {
	if o == nil || o.AvgJobLag == nil {
		var ret float32
		return ret
	}
	return *o.AvgJobLag
}

// GetAvgJobLagOk returns a tuple with the AvgJobLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetAvgJobLagOk() (*float32, bool) {
	if o == nil || o.AvgJobLag == nil {
		return nil, false
	}
	return o.AvgJobLag, true
}

// HasAvgJobLag returns a boolean if a field has been set.
func (o *JobStat) HasAvgJobLag() bool {
	if o != nil && o.AvgJobLag != nil {
		return true
	}

	return false
}

// SetAvgJobLag gets a reference to the given float32 and assigns it to the AvgJobLag field.
func (o *JobStat) SetAvgJobLag(v float32) {
	o.AvgJobLag = &v
}

// GetMaxJobLag returns the MaxJobLag field value if set, zero value otherwise.
func (o *JobStat) GetMaxJobLag() int32 {
	if o == nil || o.MaxJobLag == nil {
		var ret int32
		return ret
	}
	return *o.MaxJobLag
}

// GetMaxJobLagOk returns a tuple with the MaxJobLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetMaxJobLagOk() (*int32, bool) {
	if o == nil || o.MaxJobLag == nil {
		return nil, false
	}
	return o.MaxJobLag, true
}

// HasMaxJobLag returns a boolean if a field has been set.
func (o *JobStat) HasMaxJobLag() bool {
	if o != nil && o.MaxJobLag != nil {
		return true
	}

	return false
}

// SetMaxJobLag gets a reference to the given int32 and assigns it to the MaxJobLag field.
func (o *JobStat) SetMaxJobLag(v int32) {
	o.MaxJobLag = &v
}

// GetMinJobLag returns the MinJobLag field value if set, zero value otherwise.
func (o *JobStat) GetMinJobLag() int32 {
	if o == nil || o.MinJobLag == nil {
		var ret int32
		return ret
	}
	return *o.MinJobLag
}

// GetMinJobLagOk returns a tuple with the MinJobLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetMinJobLagOk() (*int32, bool) {
	if o == nil || o.MinJobLag == nil {
		return nil, false
	}
	return o.MinJobLag, true
}

// HasMinJobLag returns a boolean if a field has been set.
func (o *JobStat) HasMinJobLag() bool {
	if o != nil && o.MinJobLag != nil {
		return true
	}

	return false
}

// SetMinJobLag gets a reference to the given int32 and assigns it to the MinJobLag field.
func (o *JobStat) SetMinJobLag(v int32) {
	o.MinJobLag = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *JobStat) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *JobStat) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *JobStat) SetPeriod(v string) {
	o.Period = &v
}

// GetStartDt returns the StartDt field value if set, zero value otherwise.
func (o *JobStat) GetStartDt() time.Time {
	if o == nil || o.StartDt == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDt
}

// GetStartDtOk returns a tuple with the StartDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetStartDtOk() (*time.Time, bool) {
	if o == nil || o.StartDt == nil {
		return nil, false
	}
	return o.StartDt, true
}

// HasStartDt returns a boolean if a field has been set.
func (o *JobStat) HasStartDt() bool {
	if o != nil && o.StartDt != nil {
		return true
	}

	return false
}

// SetStartDt gets a reference to the given time.Time and assigns it to the StartDt field.
func (o *JobStat) SetStartDt(v time.Time) {
	o.StartDt = &v
}

// GetEndDt returns the EndDt field value if set, zero value otherwise.
func (o *JobStat) GetEndDt() time.Time {
	if o == nil || o.EndDt == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDt
}

// GetEndDtOk returns a tuple with the EndDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetEndDtOk() (*time.Time, bool) {
	if o == nil || o.EndDt == nil {
		return nil, false
	}
	return o.EndDt, true
}

// HasEndDt returns a boolean if a field has been set.
func (o *JobStat) HasEndDt() bool {
	if o != nil && o.EndDt != nil {
		return true
	}

	return false
}

// SetEndDt gets a reference to the given time.Time and assigns it to the EndDt field.
func (o *JobStat) SetEndDt(v time.Time) {
	o.EndDt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *JobStat) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *JobStat) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *JobStat) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *JobStat) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStat) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *JobStat) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *JobStat) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o JobStat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Runs != nil {
		toSerialize["runs"] = o.Runs
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	if o.JobCount != nil {
		toSerialize["job_count"] = o.JobCount
	}
	if o.AvgRuntime != nil {
		toSerialize["avg_runtime"] = o.AvgRuntime
	}
	if o.MaxRuntime != nil {
		toSerialize["max_runtime"] = o.MaxRuntime
	}
	if o.MinRuntime != nil {
		toSerialize["min_runtime"] = o.MinRuntime
	}
	if o.TotalJobs != nil {
		toSerialize["total_jobs"] = o.TotalJobs
	}
	if o.TotalEnabled != nil {
		toSerialize["total_enabled"] = o.TotalEnabled
	}
	if o.AvgJobLag != nil {
		toSerialize["avg_job_lag"] = o.AvgJobLag
	}
	if o.MaxJobLag != nil {
		toSerialize["max_job_lag"] = o.MaxJobLag
	}
	if o.MinJobLag != nil {
		toSerialize["min_job_lag"] = o.MinJobLag
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.StartDt != nil {
		toSerialize["start_dt"] = o.StartDt
	}
	if o.EndDt != nil {
		toSerialize["end_dt"] = o.EndDt
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableJobStat struct {
	value *JobStat
	isSet bool
}

func (v NullableJobStat) Get() *JobStat {
	return v.value
}

func (v *NullableJobStat) Set(val *JobStat) {
	v.value = val
	v.isSet = true
}

func (v NullableJobStat) IsSet() bool {
	return v.isSet
}

func (v *NullableJobStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobStat(val *JobStat) *NullableJobStat {
	return &NullableJobStat{value: val, isSet: true}
}

func (v NullableJobStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


