/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BJR

import (
	"encoding/json"
	"time"
)

// SingleJob struct for SingleJob
type SingleJob struct {
	// The object's primary key. This uniquely identifies the object in the system.
	Id *int32 `json:"id,omitempty"`
	// The name of the job.
	Name *string `json:"name,omitempty"`
	// The cron expression for the job.
	Cron *string `json:"cron,omitempty"`
	// Whether the job is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
	// The command that is executed when the job fires.
	Command *string `json:"command,omitempty"`
	// The last time the job ran.
	LastRun NullableString `json:"last_run,omitempty"`
	// The date and time of the job's next run.
	NextRun *time.Time `json:"next_run,omitempty"`
	// Whether the last run of the job was successful.
	Success *bool `json:"success,omitempty"`
	// Whether the job is currently running.
	Running *bool `json:"running,omitempty"`
	// The timezone that the job will run in.
	Timezone *string `json:"timezone,omitempty"`
	// An array of tags associated with the job.
	Tags *[]string `json:"tags,omitempty"`
	// The UTC date and time that the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The UTC date and time that the object was last modified.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// This url will receive a POST request with details about all successful job runs.
	SuccessCallback NullableString `json:"success_callback,omitempty"`
	// This url will receive a POST request with details about all unsuccessful job runs.
	FailureCallback NullableString `json:"failure_callback,omitempty"`
	// The average runtime across all runs of this job.
	AvgRunDuration NullableFloat32 `json:"avg_run_duration,omitempty"`
	// The maximum runtime across all runs of this job.
	MaxRunDuration NullableFloat32 `json:"max_run_duration,omitempty"`
	// The minimum runtime across all runs of this job.
	MinRunDuration NullableFloat32 `json:"min_run_duration,omitempty"`
	// The average runtime trend across all runs of this job.
	AvgRunDurationTrend NullableFloat32 `json:"avg_run_duration_trend,omitempty"`
	// The average job lag across all runs of this job.
	AvgRunLag NullableFloat32 `json:"avg_run_lag,omitempty"`
	// The maximum job lag across all runs of this job.
	MaxRunLag NullableFloat32 `json:"max_run_lag,omitempty"`
	// The minimum job lag across all runs of this job.
	MinRunLag NullableFloat32 `json:"min_run_lag,omitempty"`
	// The average job lag trend across all runs of this job.
	AvgRunLagTrend NullableFloat32 `json:"avg_run_lag_trend,omitempty"`
}

// NewSingleJob instantiates a new SingleJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleJob() *SingleJob {
	this := SingleJob{}
	return &this
}

// NewSingleJobWithDefaults instantiates a new SingleJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleJobWithDefaults() *SingleJob {
	this := SingleJob{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SingleJob) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SingleJob) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SingleJob) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SingleJob) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SingleJob) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SingleJob) SetName(v string) {
	o.Name = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *SingleJob) GetCron() string {
	if o == nil || o.Cron == nil {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetCronOk() (*string, bool) {
	if o == nil || o.Cron == nil {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *SingleJob) HasCron() bool {
	if o != nil && o.Cron != nil {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *SingleJob) SetCron(v string) {
	o.Cron = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SingleJob) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SingleJob) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SingleJob) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *SingleJob) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *SingleJob) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *SingleJob) SetCommand(v string) {
	o.Command = &v
}

// GetLastRun returns the LastRun field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetLastRun() string {
	if o == nil || o.LastRun.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastRun.Get()
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetLastRunOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastRun.Get(), o.LastRun.IsSet()
}

// HasLastRun returns a boolean if a field has been set.
func (o *SingleJob) HasLastRun() bool {
	if o != nil && o.LastRun.IsSet() {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given NullableString and assigns it to the LastRun field.
func (o *SingleJob) SetLastRun(v string) {
	o.LastRun.Set(&v)
}
// SetLastRunNil sets the value for LastRun to be an explicit nil
func (o *SingleJob) SetLastRunNil() {
	o.LastRun.Set(nil)
}

// UnsetLastRun ensures that no value is present for LastRun, not even an explicit nil
func (o *SingleJob) UnsetLastRun() {
	o.LastRun.Unset()
}

// GetNextRun returns the NextRun field value if set, zero value otherwise.
func (o *SingleJob) GetNextRun() time.Time {
	if o == nil || o.NextRun == nil {
		var ret time.Time
		return ret
	}
	return *o.NextRun
}

// GetNextRunOk returns a tuple with the NextRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetNextRunOk() (*time.Time, bool) {
	if o == nil || o.NextRun == nil {
		return nil, false
	}
	return o.NextRun, true
}

// HasNextRun returns a boolean if a field has been set.
func (o *SingleJob) HasNextRun() bool {
	if o != nil && o.NextRun != nil {
		return true
	}

	return false
}

// SetNextRun gets a reference to the given time.Time and assigns it to the NextRun field.
func (o *SingleJob) SetNextRun(v time.Time) {
	o.NextRun = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *SingleJob) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *SingleJob) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *SingleJob) SetSuccess(v bool) {
	o.Success = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *SingleJob) GetRunning() bool {
	if o == nil || o.Running == nil {
		var ret bool
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetRunningOk() (*bool, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *SingleJob) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given bool and assigns it to the Running field.
func (o *SingleJob) SetRunning(v bool) {
	o.Running = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *SingleJob) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *SingleJob) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *SingleJob) SetTimezone(v string) {
	o.Timezone = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SingleJob) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SingleJob) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SingleJob) SetTags(v []string) {
	o.Tags = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SingleJob) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SingleJob) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SingleJob) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SingleJob) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJob) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SingleJob) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SingleJob) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetSuccessCallback returns the SuccessCallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetSuccessCallback() string {
	if o == nil || o.SuccessCallback.Get() == nil {
		var ret string
		return ret
	}
	return *o.SuccessCallback.Get()
}

// GetSuccessCallbackOk returns a tuple with the SuccessCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetSuccessCallbackOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SuccessCallback.Get(), o.SuccessCallback.IsSet()
}

// HasSuccessCallback returns a boolean if a field has been set.
func (o *SingleJob) HasSuccessCallback() bool {
	if o != nil && o.SuccessCallback.IsSet() {
		return true
	}

	return false
}

// SetSuccessCallback gets a reference to the given NullableString and assigns it to the SuccessCallback field.
func (o *SingleJob) SetSuccessCallback(v string) {
	o.SuccessCallback.Set(&v)
}
// SetSuccessCallbackNil sets the value for SuccessCallback to be an explicit nil
func (o *SingleJob) SetSuccessCallbackNil() {
	o.SuccessCallback.Set(nil)
}

// UnsetSuccessCallback ensures that no value is present for SuccessCallback, not even an explicit nil
func (o *SingleJob) UnsetSuccessCallback() {
	o.SuccessCallback.Unset()
}

// GetFailureCallback returns the FailureCallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetFailureCallback() string {
	if o == nil || o.FailureCallback.Get() == nil {
		var ret string
		return ret
	}
	return *o.FailureCallback.Get()
}

// GetFailureCallbackOk returns a tuple with the FailureCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetFailureCallbackOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailureCallback.Get(), o.FailureCallback.IsSet()
}

// HasFailureCallback returns a boolean if a field has been set.
func (o *SingleJob) HasFailureCallback() bool {
	if o != nil && o.FailureCallback.IsSet() {
		return true
	}

	return false
}

// SetFailureCallback gets a reference to the given NullableString and assigns it to the FailureCallback field.
func (o *SingleJob) SetFailureCallback(v string) {
	o.FailureCallback.Set(&v)
}
// SetFailureCallbackNil sets the value for FailureCallback to be an explicit nil
func (o *SingleJob) SetFailureCallbackNil() {
	o.FailureCallback.Set(nil)
}

// UnsetFailureCallback ensures that no value is present for FailureCallback, not even an explicit nil
func (o *SingleJob) UnsetFailureCallback() {
	o.FailureCallback.Unset()
}

// GetAvgRunDuration returns the AvgRunDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetAvgRunDuration() float32 {
	if o == nil || o.AvgRunDuration.Get() == nil {
		var ret float32
		return ret
	}
	return *o.AvgRunDuration.Get()
}

// GetAvgRunDurationOk returns a tuple with the AvgRunDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetAvgRunDurationOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AvgRunDuration.Get(), o.AvgRunDuration.IsSet()
}

// HasAvgRunDuration returns a boolean if a field has been set.
func (o *SingleJob) HasAvgRunDuration() bool {
	if o != nil && o.AvgRunDuration.IsSet() {
		return true
	}

	return false
}

// SetAvgRunDuration gets a reference to the given NullableFloat32 and assigns it to the AvgRunDuration field.
func (o *SingleJob) SetAvgRunDuration(v float32) {
	o.AvgRunDuration.Set(&v)
}
// SetAvgRunDurationNil sets the value for AvgRunDuration to be an explicit nil
func (o *SingleJob) SetAvgRunDurationNil() {
	o.AvgRunDuration.Set(nil)
}

// UnsetAvgRunDuration ensures that no value is present for AvgRunDuration, not even an explicit nil
func (o *SingleJob) UnsetAvgRunDuration() {
	o.AvgRunDuration.Unset()
}

// GetMaxRunDuration returns the MaxRunDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetMaxRunDuration() float32 {
	if o == nil || o.MaxRunDuration.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MaxRunDuration.Get()
}

// GetMaxRunDurationOk returns a tuple with the MaxRunDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetMaxRunDurationOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxRunDuration.Get(), o.MaxRunDuration.IsSet()
}

// HasMaxRunDuration returns a boolean if a field has been set.
func (o *SingleJob) HasMaxRunDuration() bool {
	if o != nil && o.MaxRunDuration.IsSet() {
		return true
	}

	return false
}

// SetMaxRunDuration gets a reference to the given NullableFloat32 and assigns it to the MaxRunDuration field.
func (o *SingleJob) SetMaxRunDuration(v float32) {
	o.MaxRunDuration.Set(&v)
}
// SetMaxRunDurationNil sets the value for MaxRunDuration to be an explicit nil
func (o *SingleJob) SetMaxRunDurationNil() {
	o.MaxRunDuration.Set(nil)
}

// UnsetMaxRunDuration ensures that no value is present for MaxRunDuration, not even an explicit nil
func (o *SingleJob) UnsetMaxRunDuration() {
	o.MaxRunDuration.Unset()
}

// GetMinRunDuration returns the MinRunDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetMinRunDuration() float32 {
	if o == nil || o.MinRunDuration.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MinRunDuration.Get()
}

// GetMinRunDurationOk returns a tuple with the MinRunDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetMinRunDurationOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinRunDuration.Get(), o.MinRunDuration.IsSet()
}

// HasMinRunDuration returns a boolean if a field has been set.
func (o *SingleJob) HasMinRunDuration() bool {
	if o != nil && o.MinRunDuration.IsSet() {
		return true
	}

	return false
}

// SetMinRunDuration gets a reference to the given NullableFloat32 and assigns it to the MinRunDuration field.
func (o *SingleJob) SetMinRunDuration(v float32) {
	o.MinRunDuration.Set(&v)
}
// SetMinRunDurationNil sets the value for MinRunDuration to be an explicit nil
func (o *SingleJob) SetMinRunDurationNil() {
	o.MinRunDuration.Set(nil)
}

// UnsetMinRunDuration ensures that no value is present for MinRunDuration, not even an explicit nil
func (o *SingleJob) UnsetMinRunDuration() {
	o.MinRunDuration.Unset()
}

// GetAvgRunDurationTrend returns the AvgRunDurationTrend field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetAvgRunDurationTrend() float32 {
	if o == nil || o.AvgRunDurationTrend.Get() == nil {
		var ret float32
		return ret
	}
	return *o.AvgRunDurationTrend.Get()
}

// GetAvgRunDurationTrendOk returns a tuple with the AvgRunDurationTrend field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetAvgRunDurationTrendOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AvgRunDurationTrend.Get(), o.AvgRunDurationTrend.IsSet()
}

// HasAvgRunDurationTrend returns a boolean if a field has been set.
func (o *SingleJob) HasAvgRunDurationTrend() bool {
	if o != nil && o.AvgRunDurationTrend.IsSet() {
		return true
	}

	return false
}

// SetAvgRunDurationTrend gets a reference to the given NullableFloat32 and assigns it to the AvgRunDurationTrend field.
func (o *SingleJob) SetAvgRunDurationTrend(v float32) {
	o.AvgRunDurationTrend.Set(&v)
}
// SetAvgRunDurationTrendNil sets the value for AvgRunDurationTrend to be an explicit nil
func (o *SingleJob) SetAvgRunDurationTrendNil() {
	o.AvgRunDurationTrend.Set(nil)
}

// UnsetAvgRunDurationTrend ensures that no value is present for AvgRunDurationTrend, not even an explicit nil
func (o *SingleJob) UnsetAvgRunDurationTrend() {
	o.AvgRunDurationTrend.Unset()
}

// GetAvgRunLag returns the AvgRunLag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetAvgRunLag() float32 {
	if o == nil || o.AvgRunLag.Get() == nil {
		var ret float32
		return ret
	}
	return *o.AvgRunLag.Get()
}

// GetAvgRunLagOk returns a tuple with the AvgRunLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetAvgRunLagOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AvgRunLag.Get(), o.AvgRunLag.IsSet()
}

// HasAvgRunLag returns a boolean if a field has been set.
func (o *SingleJob) HasAvgRunLag() bool {
	if o != nil && o.AvgRunLag.IsSet() {
		return true
	}

	return false
}

// SetAvgRunLag gets a reference to the given NullableFloat32 and assigns it to the AvgRunLag field.
func (o *SingleJob) SetAvgRunLag(v float32) {
	o.AvgRunLag.Set(&v)
}
// SetAvgRunLagNil sets the value for AvgRunLag to be an explicit nil
func (o *SingleJob) SetAvgRunLagNil() {
	o.AvgRunLag.Set(nil)
}

// UnsetAvgRunLag ensures that no value is present for AvgRunLag, not even an explicit nil
func (o *SingleJob) UnsetAvgRunLag() {
	o.AvgRunLag.Unset()
}

// GetMaxRunLag returns the MaxRunLag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetMaxRunLag() float32 {
	if o == nil || o.MaxRunLag.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MaxRunLag.Get()
}

// GetMaxRunLagOk returns a tuple with the MaxRunLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetMaxRunLagOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxRunLag.Get(), o.MaxRunLag.IsSet()
}

// HasMaxRunLag returns a boolean if a field has been set.
func (o *SingleJob) HasMaxRunLag() bool {
	if o != nil && o.MaxRunLag.IsSet() {
		return true
	}

	return false
}

// SetMaxRunLag gets a reference to the given NullableFloat32 and assigns it to the MaxRunLag field.
func (o *SingleJob) SetMaxRunLag(v float32) {
	o.MaxRunLag.Set(&v)
}
// SetMaxRunLagNil sets the value for MaxRunLag to be an explicit nil
func (o *SingleJob) SetMaxRunLagNil() {
	o.MaxRunLag.Set(nil)
}

// UnsetMaxRunLag ensures that no value is present for MaxRunLag, not even an explicit nil
func (o *SingleJob) UnsetMaxRunLag() {
	o.MaxRunLag.Unset()
}

// GetMinRunLag returns the MinRunLag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetMinRunLag() float32 {
	if o == nil || o.MinRunLag.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MinRunLag.Get()
}

// GetMinRunLagOk returns a tuple with the MinRunLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetMinRunLagOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinRunLag.Get(), o.MinRunLag.IsSet()
}

// HasMinRunLag returns a boolean if a field has been set.
func (o *SingleJob) HasMinRunLag() bool {
	if o != nil && o.MinRunLag.IsSet() {
		return true
	}

	return false
}

// SetMinRunLag gets a reference to the given NullableFloat32 and assigns it to the MinRunLag field.
func (o *SingleJob) SetMinRunLag(v float32) {
	o.MinRunLag.Set(&v)
}
// SetMinRunLagNil sets the value for MinRunLag to be an explicit nil
func (o *SingleJob) SetMinRunLagNil() {
	o.MinRunLag.Set(nil)
}

// UnsetMinRunLag ensures that no value is present for MinRunLag, not even an explicit nil
func (o *SingleJob) UnsetMinRunLag() {
	o.MinRunLag.Unset()
}

// GetAvgRunLagTrend returns the AvgRunLagTrend field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJob) GetAvgRunLagTrend() float32 {
	if o == nil || o.AvgRunLagTrend.Get() == nil {
		var ret float32
		return ret
	}
	return *o.AvgRunLagTrend.Get()
}

// GetAvgRunLagTrendOk returns a tuple with the AvgRunLagTrend field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJob) GetAvgRunLagTrendOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AvgRunLagTrend.Get(), o.AvgRunLagTrend.IsSet()
}

// HasAvgRunLagTrend returns a boolean if a field has been set.
func (o *SingleJob) HasAvgRunLagTrend() bool {
	if o != nil && o.AvgRunLagTrend.IsSet() {
		return true
	}

	return false
}

// SetAvgRunLagTrend gets a reference to the given NullableFloat32 and assigns it to the AvgRunLagTrend field.
func (o *SingleJob) SetAvgRunLagTrend(v float32) {
	o.AvgRunLagTrend.Set(&v)
}
// SetAvgRunLagTrendNil sets the value for AvgRunLagTrend to be an explicit nil
func (o *SingleJob) SetAvgRunLagTrendNil() {
	o.AvgRunLagTrend.Set(nil)
}

// UnsetAvgRunLagTrend ensures that no value is present for AvgRunLagTrend, not even an explicit nil
func (o *SingleJob) UnsetAvgRunLagTrend() {
	o.AvgRunLagTrend.Unset()
}

func (o SingleJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Cron != nil {
		toSerialize["cron"] = o.Cron
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.LastRun.IsSet() {
		toSerialize["last_run"] = o.LastRun.Get()
	}
	if o.NextRun != nil {
		toSerialize["next_run"] = o.NextRun
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Running != nil {
		toSerialize["running"] = o.Running
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.SuccessCallback.IsSet() {
		toSerialize["success_callback"] = o.SuccessCallback.Get()
	}
	if o.FailureCallback.IsSet() {
		toSerialize["failure_callback"] = o.FailureCallback.Get()
	}
	if o.AvgRunDuration.IsSet() {
		toSerialize["avg_run_duration"] = o.AvgRunDuration.Get()
	}
	if o.MaxRunDuration.IsSet() {
		toSerialize["max_run_duration"] = o.MaxRunDuration.Get()
	}
	if o.MinRunDuration.IsSet() {
		toSerialize["min_run_duration"] = o.MinRunDuration.Get()
	}
	if o.AvgRunDurationTrend.IsSet() {
		toSerialize["avg_run_duration_trend"] = o.AvgRunDurationTrend.Get()
	}
	if o.AvgRunLag.IsSet() {
		toSerialize["avg_run_lag"] = o.AvgRunLag.Get()
	}
	if o.MaxRunLag.IsSet() {
		toSerialize["max_run_lag"] = o.MaxRunLag.Get()
	}
	if o.MinRunLag.IsSet() {
		toSerialize["min_run_lag"] = o.MinRunLag.Get()
	}
	if o.AvgRunLagTrend.IsSet() {
		toSerialize["avg_run_lag_trend"] = o.AvgRunLagTrend.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSingleJob struct {
	value *SingleJob
	isSet bool
}

func (v NullableSingleJob) Get() *SingleJob {
	return v.value
}

func (v *NullableSingleJob) Set(val *SingleJob) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleJob) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleJob(val *SingleJob) *NullableSingleJob {
	return &NullableSingleJob{value: val, isSet: true}
}

func (v NullableSingleJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


