/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BJR

import (
	"encoding/json"
	"time"
)

// SingleJobRun struct for SingleJobRun
type SingleJobRun struct {
	// The object's primary key. This uniquely identifies the object in the system.
	Id *int32 `json:"id,omitempty"`
	// Whether the run was successful or not.
	Success *bool `json:"success,omitempty"`
	// The return code that the command exited with. 0 means success.
	ReturnCode *int32 `json:"return_code,omitempty"`
	// If the run failed, the error message that was returned.
	ErrorMessage NullableString `json:"error_message,omitempty"`
	// The text written to STDOUT as part of the job.
	Stdout NullableString `json:"stdout,omitempty"`
	// The text written to STDERR as part of the job.
	Stderr NullableString `json:"stderr,omitempty"`
	// The date and time that the run started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The date and time that the run ended.
	EndTime *time.Time `json:"end_time,omitempty"`
	// The date and time that the job should have run.
	ScheduledStartTime NullableTime `json:"scheduled_start_time,omitempty"`
	// The difference in seconds between when the job was scheduled to run and when it ran.
	ScheduleDiffInSeconds NullableInt32 `json:"schedule_diff_in_seconds,omitempty"`
	// The job that the run is associated with.
	JobId *int32 `json:"job_id,omitempty"`
	// True if the job was run manually as opposed to run on a schedule.
	IsManual *bool `json:"is_manual,omitempty"`
	// The date and time that the run record was created in UTC.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time that the run record was last updated in UTC.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewSingleJobRun instantiates a new SingleJobRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleJobRun() *SingleJobRun {
	this := SingleJobRun{}
	return &this
}

// NewSingleJobRunWithDefaults instantiates a new SingleJobRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleJobRunWithDefaults() *SingleJobRun {
	this := SingleJobRun{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SingleJobRun) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SingleJobRun) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SingleJobRun) SetId(v int32) {
	o.Id = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *SingleJobRun) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *SingleJobRun) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *SingleJobRun) SetSuccess(v bool) {
	o.Success = &v
}

// GetReturnCode returns the ReturnCode field value if set, zero value otherwise.
func (o *SingleJobRun) GetReturnCode() int32 {
	if o == nil || o.ReturnCode == nil {
		var ret int32
		return ret
	}
	return *o.ReturnCode
}

// GetReturnCodeOk returns a tuple with the ReturnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetReturnCodeOk() (*int32, bool) {
	if o == nil || o.ReturnCode == nil {
		return nil, false
	}
	return o.ReturnCode, true
}

// HasReturnCode returns a boolean if a field has been set.
func (o *SingleJobRun) HasReturnCode() bool {
	if o != nil && o.ReturnCode != nil {
		return true
	}

	return false
}

// SetReturnCode gets a reference to the given int32 and assigns it to the ReturnCode field.
func (o *SingleJobRun) SetReturnCode(v int32) {
	o.ReturnCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJobRun) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJobRun) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *SingleJobRun) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *SingleJobRun) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *SingleJobRun) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *SingleJobRun) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetStdout returns the Stdout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJobRun) GetStdout() string {
	if o == nil || o.Stdout.Get() == nil {
		var ret string
		return ret
	}
	return *o.Stdout.Get()
}

// GetStdoutOk returns a tuple with the Stdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJobRun) GetStdoutOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Stdout.Get(), o.Stdout.IsSet()
}

// HasStdout returns a boolean if a field has been set.
func (o *SingleJobRun) HasStdout() bool {
	if o != nil && o.Stdout.IsSet() {
		return true
	}

	return false
}

// SetStdout gets a reference to the given NullableString and assigns it to the Stdout field.
func (o *SingleJobRun) SetStdout(v string) {
	o.Stdout.Set(&v)
}
// SetStdoutNil sets the value for Stdout to be an explicit nil
func (o *SingleJobRun) SetStdoutNil() {
	o.Stdout.Set(nil)
}

// UnsetStdout ensures that no value is present for Stdout, not even an explicit nil
func (o *SingleJobRun) UnsetStdout() {
	o.Stdout.Unset()
}

// GetStderr returns the Stderr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJobRun) GetStderr() string {
	if o == nil || o.Stderr.Get() == nil {
		var ret string
		return ret
	}
	return *o.Stderr.Get()
}

// GetStderrOk returns a tuple with the Stderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJobRun) GetStderrOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Stderr.Get(), o.Stderr.IsSet()
}

// HasStderr returns a boolean if a field has been set.
func (o *SingleJobRun) HasStderr() bool {
	if o != nil && o.Stderr.IsSet() {
		return true
	}

	return false
}

// SetStderr gets a reference to the given NullableString and assigns it to the Stderr field.
func (o *SingleJobRun) SetStderr(v string) {
	o.Stderr.Set(&v)
}
// SetStderrNil sets the value for Stderr to be an explicit nil
func (o *SingleJobRun) SetStderrNil() {
	o.Stderr.Set(nil)
}

// UnsetStderr ensures that no value is present for Stderr, not even an explicit nil
func (o *SingleJobRun) UnsetStderr() {
	o.Stderr.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SingleJobRun) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SingleJobRun) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *SingleJobRun) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *SingleJobRun) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *SingleJobRun) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *SingleJobRun) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetScheduledStartTime returns the ScheduledStartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJobRun) GetScheduledStartTime() time.Time {
	if o == nil || o.ScheduledStartTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStartTime.Get()
}

// GetScheduledStartTimeOk returns a tuple with the ScheduledStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJobRun) GetScheduledStartTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScheduledStartTime.Get(), o.ScheduledStartTime.IsSet()
}

// HasScheduledStartTime returns a boolean if a field has been set.
func (o *SingleJobRun) HasScheduledStartTime() bool {
	if o != nil && o.ScheduledStartTime.IsSet() {
		return true
	}

	return false
}

// SetScheduledStartTime gets a reference to the given NullableTime and assigns it to the ScheduledStartTime field.
func (o *SingleJobRun) SetScheduledStartTime(v time.Time) {
	o.ScheduledStartTime.Set(&v)
}
// SetScheduledStartTimeNil sets the value for ScheduledStartTime to be an explicit nil
func (o *SingleJobRun) SetScheduledStartTimeNil() {
	o.ScheduledStartTime.Set(nil)
}

// UnsetScheduledStartTime ensures that no value is present for ScheduledStartTime, not even an explicit nil
func (o *SingleJobRun) UnsetScheduledStartTime() {
	o.ScheduledStartTime.Unset()
}

// GetScheduleDiffInSeconds returns the ScheduleDiffInSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleJobRun) GetScheduleDiffInSeconds() int32 {
	if o == nil || o.ScheduleDiffInSeconds.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ScheduleDiffInSeconds.Get()
}

// GetScheduleDiffInSecondsOk returns a tuple with the ScheduleDiffInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleJobRun) GetScheduleDiffInSecondsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScheduleDiffInSeconds.Get(), o.ScheduleDiffInSeconds.IsSet()
}

// HasScheduleDiffInSeconds returns a boolean if a field has been set.
func (o *SingleJobRun) HasScheduleDiffInSeconds() bool {
	if o != nil && o.ScheduleDiffInSeconds.IsSet() {
		return true
	}

	return false
}

// SetScheduleDiffInSeconds gets a reference to the given NullableInt32 and assigns it to the ScheduleDiffInSeconds field.
func (o *SingleJobRun) SetScheduleDiffInSeconds(v int32) {
	o.ScheduleDiffInSeconds.Set(&v)
}
// SetScheduleDiffInSecondsNil sets the value for ScheduleDiffInSeconds to be an explicit nil
func (o *SingleJobRun) SetScheduleDiffInSecondsNil() {
	o.ScheduleDiffInSeconds.Set(nil)
}

// UnsetScheduleDiffInSeconds ensures that no value is present for ScheduleDiffInSeconds, not even an explicit nil
func (o *SingleJobRun) UnsetScheduleDiffInSeconds() {
	o.ScheduleDiffInSeconds.Unset()
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *SingleJobRun) GetJobId() int32 {
	if o == nil || o.JobId == nil {
		var ret int32
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetJobIdOk() (*int32, bool) {
	if o == nil || o.JobId == nil {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *SingleJobRun) HasJobId() bool {
	if o != nil && o.JobId != nil {
		return true
	}

	return false
}

// SetJobId gets a reference to the given int32 and assigns it to the JobId field.
func (o *SingleJobRun) SetJobId(v int32) {
	o.JobId = &v
}

// GetIsManual returns the IsManual field value if set, zero value otherwise.
func (o *SingleJobRun) GetIsManual() bool {
	if o == nil || o.IsManual == nil {
		var ret bool
		return ret
	}
	return *o.IsManual
}

// GetIsManualOk returns a tuple with the IsManual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetIsManualOk() (*bool, bool) {
	if o == nil || o.IsManual == nil {
		return nil, false
	}
	return o.IsManual, true
}

// HasIsManual returns a boolean if a field has been set.
func (o *SingleJobRun) HasIsManual() bool {
	if o != nil && o.IsManual != nil {
		return true
	}

	return false
}

// SetIsManual gets a reference to the given bool and assigns it to the IsManual field.
func (o *SingleJobRun) SetIsManual(v bool) {
	o.IsManual = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SingleJobRun) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SingleJobRun) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SingleJobRun) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SingleJobRun) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleJobRun) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SingleJobRun) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SingleJobRun) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o SingleJobRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.ReturnCode != nil {
		toSerialize["return_code"] = o.ReturnCode
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["error_message"] = o.ErrorMessage.Get()
	}
	if o.Stdout.IsSet() {
		toSerialize["stdout"] = o.Stdout.Get()
	}
	if o.Stderr.IsSet() {
		toSerialize["stderr"] = o.Stderr.Get()
	}
	if o.StartTime != nil {
		toSerialize["start_time"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["end_time"] = o.EndTime
	}
	if o.ScheduledStartTime.IsSet() {
		toSerialize["scheduled_start_time"] = o.ScheduledStartTime.Get()
	}
	if o.ScheduleDiffInSeconds.IsSet() {
		toSerialize["schedule_diff_in_seconds"] = o.ScheduleDiffInSeconds.Get()
	}
	if o.JobId != nil {
		toSerialize["job_id"] = o.JobId
	}
	if o.IsManual != nil {
		toSerialize["is_manual"] = o.IsManual
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSingleJobRun struct {
	value *SingleJobRun
	isSet bool
}

func (v NullableSingleJobRun) Get() *SingleJobRun {
	return v.value
}

func (v *NullableSingleJobRun) Set(val *SingleJobRun) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleJobRun) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleJobRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleJobRun(val *SingleJobRun) *NullableSingleJobRun {
	return &NullableSingleJobRun{value: val, isSet: true}
}

func (v NullableSingleJobRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleJobRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


