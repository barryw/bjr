/*
 * BJR API V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * SingleJob
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-16T22:12:09.768-04:00[America/New_York]")
public class SingleJob {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("cron")
  private String cron = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("command")
  private String command = null;

  @SerializedName("next_run")
  private String nextRun = null;

  @SerializedName("running")
  private Boolean running = null;

  @SerializedName("timezone")
  private String timezone = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  public SingleJob id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The object&#x27;s primary key. This uniquely identifies the object in the system.
   * @return id
  **/
  @Schema(description = "The object's primary key. This uniquely identifies the object in the system.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public SingleJob name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the job.
   * @return name
  **/
  @Schema(description = "The name of the job.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SingleJob cron(String cron) {
    this.cron = cron;
    return this;
  }

   /**
   * The cron expression for the job.
   * @return cron
  **/
  @Schema(description = "The cron expression for the job.")
  public String getCron() {
    return cron;
  }

  public void setCron(String cron) {
    this.cron = cron;
  }

  public SingleJob enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the job is enabled or not.
   * @return enabled
  **/
  @Schema(description = "Whether the job is enabled or not.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public SingleJob command(String command) {
    this.command = command;
    return this;
  }

   /**
   * The command that is executed when the job fires.
   * @return command
  **/
  @Schema(description = "The command that is executed when the job fires.")
  public String getCommand() {
    return command;
  }

  public void setCommand(String command) {
    this.command = command;
  }

  public SingleJob nextRun(String nextRun) {
    this.nextRun = nextRun;
    return this;
  }

   /**
   * The date and time of the job&#x27;s next run.
   * @return nextRun
  **/
  @Schema(description = "The date and time of the job's next run.")
  public String getNextRun() {
    return nextRun;
  }

  public void setNextRun(String nextRun) {
    this.nextRun = nextRun;
  }

  public SingleJob running(Boolean running) {
    this.running = running;
    return this;
  }

   /**
   * Whether the job is currently running.
   * @return running
  **/
  @Schema(description = "Whether the job is currently running.")
  public Boolean isRunning() {
    return running;
  }

  public void setRunning(Boolean running) {
    this.running = running;
  }

  public SingleJob timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone that the job will run in.
   * @return timezone
  **/
  @Schema(description = "The timezone that the job will run in.")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public SingleJob tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public SingleJob addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * An array of tags associated with the job.
   * @return tags
  **/
  @Schema(description = "An array of tags associated with the job.")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public SingleJob createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The UTC date and time that the object was created.
   * @return createdAt
  **/
  @Schema(description = "The UTC date and time that the object was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public SingleJob updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The UTC date and time that the object was last modified.
   * @return updatedAt
  **/
  @Schema(description = "The UTC date and time that the object was last modified.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleJob singleJob = (SingleJob) o;
    return Objects.equals(this.id, singleJob.id) &&
        Objects.equals(this.name, singleJob.name) &&
        Objects.equals(this.cron, singleJob.cron) &&
        Objects.equals(this.enabled, singleJob.enabled) &&
        Objects.equals(this.command, singleJob.command) &&
        Objects.equals(this.nextRun, singleJob.nextRun) &&
        Objects.equals(this.running, singleJob.running) &&
        Objects.equals(this.timezone, singleJob.timezone) &&
        Objects.equals(this.tags, singleJob.tags) &&
        Objects.equals(this.createdAt, singleJob.createdAt) &&
        Objects.equals(this.updatedAt, singleJob.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, cron, enabled, command, nextRun, running, timezone, tags, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleJob {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    nextRun: ").append(toIndentedString(nextRun)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
