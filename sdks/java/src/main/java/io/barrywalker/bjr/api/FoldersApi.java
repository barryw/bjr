/*
 * BJR API V1
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.barrywalker.bjr.api;

import io.barrywalker.bjr.ApiCallback;
import io.barrywalker.bjr.ApiClient;
import io.barrywalker.bjr.ApiException;
import io.barrywalker.bjr.ApiResponse;
import io.barrywalker.bjr.Configuration;
import io.barrywalker.bjr.Pair;
import io.barrywalker.bjr.ProgressRequestBody;
import io.barrywalker.bjr.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.barrywalker.bjr.model.FolderArrayMessage;
import io.barrywalker.bjr.model.JobArrayMessage;
import io.barrywalker.bjr.model.SingleFolderMessage;
import io.barrywalker.bjr.model.SingleJobMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FoldersApi {
    private ApiClient localVarApiClient;

    public FoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createFolder
     * @param name  (required)
     * @param expression  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Folder created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to create new folder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderCall(String name, String expression, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderValidateBeforeCall(String name, String expression, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createFolder(Async)");
        }
        
        // verify the required parameter 'expression' is set
        if (expression == null) {
            throw new ApiException("Missing the required parameter 'expression' when calling createFolder(Async)");
        }
        

        okhttp3.Call localVarCall = createFolderCall(name, expression, _callback);
        return localVarCall;

    }

    /**
     * Create a new Folder
     * Create a new Folder
     * @param name  (required)
     * @param expression  (required)
     * @return SingleFolderMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Folder created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to create new folder </td><td>  -  </td></tr>
     </table>
     */
    public SingleFolderMessage createFolder(String name, String expression) throws ApiException {
        ApiResponse<SingleFolderMessage> localVarResp = createFolderWithHttpInfo(name, expression);
        return localVarResp.getData();
    }

    /**
     * Create a new Folder
     * Create a new Folder
     * @param name  (required)
     * @param expression  (required)
     * @return ApiResponse&lt;SingleFolderMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Folder created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to create new folder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleFolderMessage> createFolderWithHttpInfo(String name, String expression) throws ApiException {
        okhttp3.Call localVarCall = createFolderValidateBeforeCall(name, expression, null);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Folder (asynchronously)
     * Create a new Folder
     * @param name  (required)
     * @param expression  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Folder created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to create new folder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderAsync(String name, String expression, final ApiCallback<SingleFolderMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderValidateBeforeCall(name, expression, _callback);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFolder
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_api/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFolder(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFolderCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete an existing folder
     * Delete an existing folder
     * @param id  (required)
     * @return SingleFolderMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public SingleFolderMessage deleteFolder(Integer id) throws ApiException {
        ApiResponse<SingleFolderMessage> localVarResp = deleteFolderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete an existing folder
     * Delete an existing folder
     * @param id  (required)
     * @return ApiResponse&lt;SingleFolderMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleFolderMessage> deleteFolderWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing folder (asynchronously)
     * Delete an existing folder
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderAsync(Integer id, final ApiCallback<SingleFolderMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolder
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_api/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFolder(Async)");
        }
        

        okhttp3.Call localVarCall = getFolderCall(id, _callback);
        return localVarCall;

    }

    /**
     * Return a single folder
     * Return a single folder
     * @param id  (required)
     * @return SingleFolderMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public SingleFolderMessage getFolder(Integer id) throws ApiException {
        ApiResponse<SingleFolderMessage> localVarResp = getFolderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return a single folder
     * Return a single folder
     * @param id  (required)
     * @return ApiResponse&lt;SingleFolderMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleFolderMessage> getFolderWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getFolderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single folder (asynchronously)
     * Return a single folder
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderAsync(Integer id, final ApiCallback<SingleFolderMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolderJobs
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderJobsCall(Integer id, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_api/{id}/jobs"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderJobsValidateBeforeCall(Integer id, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFolderJobs(Async)");
        }
        

        okhttp3.Call localVarCall = getFolderJobsCall(id, perPage, page, _callback);
        return localVarCall;

    }

    /**
     * Return list of jobs in a folder
     * Return list of jobs in a folder
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @return JobArrayMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public JobArrayMessage getFolderJobs(Integer id, Integer perPage, Integer page) throws ApiException {
        ApiResponse<JobArrayMessage> localVarResp = getFolderJobsWithHttpInfo(id, perPage, page);
        return localVarResp.getData();
    }

    /**
     * Return list of jobs in a folder
     * Return list of jobs in a folder
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @return ApiResponse&lt;JobArrayMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobArrayMessage> getFolderJobsWithHttpInfo(Integer id, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getFolderJobsValidateBeforeCall(id, perPage, page, null);
        Type localVarReturnType = new TypeToken<JobArrayMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of jobs in a folder (asynchronously)
     * Return list of jobs in a folder
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderJobsAsync(Integer id, Integer perPage, Integer page, final ApiCallback<JobArrayMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderJobsValidateBeforeCall(id, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<JobArrayMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolders
     * @param perPage  (optional)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folders returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFoldersCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFoldersValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getFoldersCall(perPage, page, _callback);
        return localVarCall;

    }

    /**
     * Return paginated list of all folders
     * Return paginated list of all folders
     * @param perPage  (optional)
     * @param page  (optional)
     * @return FolderArrayMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folders returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public FolderArrayMessage getFolders(Integer perPage, Integer page) throws ApiException {
        ApiResponse<FolderArrayMessage> localVarResp = getFoldersWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * Return paginated list of all folders
     * Return paginated list of all folders
     * @param perPage  (optional)
     * @param page  (optional)
     * @return ApiResponse&lt;FolderArrayMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folders returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderArrayMessage> getFoldersWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getFoldersValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<FolderArrayMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return paginated list of all folders (asynchronously)
     * Return paginated list of all folders
     * @param perPage  (optional)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folders returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFoldersAsync(Integer perPage, Integer page, final ApiCallback<FolderArrayMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFoldersValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<FolderArrayMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFolder
     * @param id  (required)
     * @param name  (optional)
     * @param expression  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to update folder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFolderCall(Integer id, String name, String expression, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_api/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFolderValidateBeforeCall(Integer id, String name, String expression, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFolder(Async)");
        }
        

        okhttp3.Call localVarCall = updateFolderCall(id, name, expression, _callback);
        return localVarCall;

    }

    /**
     * Update an existing folder
     * Update an existing folder
     * @param id  (required)
     * @param name  (optional)
     * @param expression  (optional)
     * @return SingleFolderMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to update folder </td><td>  -  </td></tr>
     </table>
     */
    public SingleFolderMessage updateFolder(Integer id, String name, String expression) throws ApiException {
        ApiResponse<SingleFolderMessage> localVarResp = updateFolderWithHttpInfo(id, name, expression);
        return localVarResp.getData();
    }

    /**
     * Update an existing folder
     * Update an existing folder
     * @param id  (required)
     * @param name  (optional)
     * @param expression  (optional)
     * @return ApiResponse&lt;SingleFolderMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to update folder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleFolderMessage> updateFolderWithHttpInfo(Integer id, String name, String expression) throws ApiException {
        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(id, name, expression, null);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing folder (asynchronously)
     * Update an existing folder
     * @param id  (required)
     * @param name  (optional)
     * @param expression  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failed to update folder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFolderAsync(Integer id, String name, String expression, final ApiCallback<SingleFolderMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(id, name, expression, _callback);
        Type localVarReturnType = new TypeToken<SingleFolderMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
