/*
 * BJR API V1
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.barrywalker.bjr.api;

import io.barrywalker.bjr.ApiCallback;
import io.barrywalker.bjr.ApiClient;
import io.barrywalker.bjr.ApiException;
import io.barrywalker.bjr.ApiResponse;
import io.barrywalker.bjr.Configuration;
import io.barrywalker.bjr.Pair;
import io.barrywalker.bjr.ProgressRequestBody;
import io.barrywalker.bjr.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.barrywalker.bjr.model.JobArrayMessage;
import io.barrywalker.bjr.model.JobIn;
import io.barrywalker.bjr.model.JobRunArrayMessage;
import io.barrywalker.bjr.model.OccurrenceMessage;
import io.barrywalker.bjr.model.SingleJobMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createJob
     * @param jobIn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Job created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid timezone name. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A job with this name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createJobCall(JobIn jobIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobIn;

        // create path and map variables
        String localVarPath = "/job_api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobValidateBeforeCall(JobIn jobIn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createJobCall(jobIn, _callback);
        return localVarCall;

    }

    /**
     * Creates a job
     * Creates a job
     * @param jobIn  (optional)
     * @return SingleJobMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Job created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid timezone name. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A job with this name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public SingleJobMessage createJob(JobIn jobIn) throws ApiException {
        ApiResponse<SingleJobMessage> localVarResp = createJobWithHttpInfo(jobIn);
        return localVarResp.getData();
    }

    /**
     * Creates a job
     * Creates a job
     * @param jobIn  (optional)
     * @return ApiResponse&lt;SingleJobMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Job created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid timezone name. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A job with this name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleJobMessage> createJobWithHttpInfo(JobIn jobIn) throws ApiException {
        okhttp3.Call localVarCall = createJobValidateBeforeCall(jobIn, null);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a job (asynchronously)
     * Creates a job
     * @param jobIn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Job created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid timezone name. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> A job with this name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createJobAsync(JobIn jobIn, final ApiCallback<SingleJobMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJobValidateBeforeCall(jobIn, _callback);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteJob
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job %{id} deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job &#39;%{id}&#39; cannot be deleted because it&#39;s running. Try disabling it first. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_api/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteJob(Async)");
        }
        

        okhttp3.Call localVarCall = deleteJobCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deletes a job
     * Deletes a job
     * @param id  (required)
     * @return SingleJobMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job %{id} deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job &#39;%{id}&#39; cannot be deleted because it&#39;s running. Try disabling it first. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public SingleJobMessage deleteJob(Integer id) throws ApiException {
        ApiResponse<SingleJobMessage> localVarResp = deleteJobWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Deletes a job
     * Deletes a job
     * @param id  (required)
     * @return ApiResponse&lt;SingleJobMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job %{id} deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job &#39;%{id}&#39; cannot be deleted because it&#39;s running. Try disabling it first. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleJobMessage> deleteJobWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a job (asynchronously)
     * Deletes a job
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job %{id} deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job &#39;%{id}&#39; cannot be deleted because it&#39;s running. Try disabling it first. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobAsync(Integer id, final ApiCallback<SingleJobMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJob
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_api/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJob(Async)");
        }
        

        okhttp3.Call localVarCall = getJobCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a single job
     * Retrieves a single job
     * @param id  (required)
     * @return SingleJobMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public SingleJobMessage getJob(Integer id) throws ApiException {
        ApiResponse<SingleJobMessage> localVarResp = getJobWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a single job
     * Retrieves a single job
     * @param id  (required)
     * @return ApiResponse&lt;SingleJobMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleJobMessage> getJobWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getJobValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a single job (asynchronously)
     * Retrieves a single job
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAsync(Integer id, final ApiCallback<SingleJobMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobRuns
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param succeeded  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param timezone  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Runs received successfully. </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getJobRunsCall(Integer id, Integer perPage, Integer page, Boolean succeeded, String startDate, String endDate, String timezone, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_api/{id}/runs"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (succeeded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("succeeded", succeeded));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobRunsValidateBeforeCall(Integer id, Integer perPage, Integer page, Boolean succeeded, String startDate, String endDate, String timezone, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJobRuns(Async)");
        }
        

        okhttp3.Call localVarCall = getJobRunsCall(id, perPage, page, succeeded, startDate, endDate, timezone, _callback);
        return localVarCall;

    }

    /**
     * Retrieve the runs for a job
     * Retrieve the runs for a job
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param succeeded  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param timezone  (optional)
     * @return JobRunArrayMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Runs received successfully. </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public JobRunArrayMessage getJobRuns(Integer id, Integer perPage, Integer page, Boolean succeeded, String startDate, String endDate, String timezone) throws ApiException {
        ApiResponse<JobRunArrayMessage> localVarResp = getJobRunsWithHttpInfo(id, perPage, page, succeeded, startDate, endDate, timezone);
        return localVarResp.getData();
    }

    /**
     * Retrieve the runs for a job
     * Retrieve the runs for a job
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param succeeded  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param timezone  (optional)
     * @return ApiResponse&lt;JobRunArrayMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Runs received successfully. </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public ApiResponse<JobRunArrayMessage> getJobRunsWithHttpInfo(Integer id, Integer perPage, Integer page, Boolean succeeded, String startDate, String endDate, String timezone) throws ApiException {
        okhttp3.Call localVarCall = getJobRunsValidateBeforeCall(id, perPage, page, succeeded, startDate, endDate, timezone, null);
        Type localVarReturnType = new TypeToken<JobRunArrayMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the runs for a job (asynchronously)
     * Retrieve the runs for a job
     * @param id  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param succeeded  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param timezone  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Runs received successfully. </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getJobRunsAsync(Integer id, Integer perPage, Integer page, Boolean succeeded, String startDate, String endDate, String timezone, final ApiCallback<JobRunArrayMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobRunsValidateBeforeCall(id, perPage, page, succeeded, startDate, endDate, timezone, _callback);
        Type localVarReturnType = new TypeToken<JobRunArrayMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param expression A search expression to filter jobs. (optional)
     * @param timezone  (optional)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(String expression, String timezone, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(String expression, String timezone, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getJobsCall(expression, timezone, perPage, page, _callback);
        return localVarCall;

    }

    /**
     * Retrieves jobs
     * Retrieves jobs
     * @param expression A search expression to filter jobs. (optional)
     * @param timezone  (optional)
     * @param perPage  (optional)
     * @param page  (optional)
     * @return JobArrayMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public JobArrayMessage getJobs(String expression, String timezone, Integer perPage, Integer page) throws ApiException {
        ApiResponse<JobArrayMessage> localVarResp = getJobsWithHttpInfo(expression, timezone, perPage, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves jobs
     * Retrieves jobs
     * @param expression A search expression to filter jobs. (optional)
     * @param timezone  (optional)
     * @param perPage  (optional)
     * @param page  (optional)
     * @return ApiResponse&lt;JobArrayMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public ApiResponse<JobArrayMessage> getJobsWithHttpInfo(String expression, String timezone, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(expression, timezone, perPage, page, null);
        Type localVarReturnType = new TypeToken<JobArrayMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves jobs (asynchronously)
     * Retrieves jobs
     * @param expression A search expression to filter jobs. (optional)
     * @param timezone  (optional)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs returned successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(String expression, String timezone, Integer perPage, Integer page, final ApiCallback<JobArrayMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(expression, timezone, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<JobArrayMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobOccurrences
     * @param id The id of the job to retrieve occurrences for (required)
     * @param endDate The date to retrieve occurrences up to (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param timezone  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Occurrences received successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobOccurrencesCall(Integer id, String endDate, Integer perPage, Integer page, String timezone, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_api/{id}/occurrences/{end_date}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "end_date" + "\\}", localVarApiClient.escapeString(endDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobOccurrencesValidateBeforeCall(Integer id, String endDate, Integer perPage, Integer page, String timezone, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling jobOccurrences(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling jobOccurrences(Async)");
        }
        

        okhttp3.Call localVarCall = jobOccurrencesCall(id, endDate, perPage, page, timezone, _callback);
        return localVarCall;

    }

    /**
     * Upcoming job occurrences
     * Retrieves a list of upcoming occurrences for a job
     * @param id The id of the job to retrieve occurrences for (required)
     * @param endDate The date to retrieve occurrences up to (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param timezone  (optional)
     * @return OccurrenceMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Occurrences received successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public OccurrenceMessage jobOccurrences(Integer id, String endDate, Integer perPage, Integer page, String timezone) throws ApiException {
        ApiResponse<OccurrenceMessage> localVarResp = jobOccurrencesWithHttpInfo(id, endDate, perPage, page, timezone);
        return localVarResp.getData();
    }

    /**
     * Upcoming job occurrences
     * Retrieves a list of upcoming occurrences for a job
     * @param id The id of the job to retrieve occurrences for (required)
     * @param endDate The date to retrieve occurrences up to (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param timezone  (optional)
     * @return ApiResponse&lt;OccurrenceMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Occurrences received successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OccurrenceMessage> jobOccurrencesWithHttpInfo(Integer id, String endDate, Integer perPage, Integer page, String timezone) throws ApiException {
        okhttp3.Call localVarCall = jobOccurrencesValidateBeforeCall(id, endDate, perPage, page, timezone, null);
        Type localVarReturnType = new TypeToken<OccurrenceMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upcoming job occurrences (asynchronously)
     * Retrieves a list of upcoming occurrences for a job
     * @param id The id of the job to retrieve occurrences for (required)
     * @param endDate The date to retrieve occurrences up to (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param timezone  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Occurrences received successfully </td><td>  * per-page - The number of items in this page. <br>  * total - The total number of items available. <br>  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobOccurrencesAsync(Integer id, String endDate, Integer perPage, Integer page, String timezone, final ApiCallback<OccurrenceMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobOccurrencesValidateBeforeCall(id, endDate, perPage, page, timezone, _callback);
        Type localVarReturnType = new TypeToken<OccurrenceMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runJobNow
     * @param id The id of the job to execute now (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job queued to execute </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job is already running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runJobNowCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_api/{id}/run_now"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runJobNowValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling runJobNow(Async)");
        }
        

        okhttp3.Call localVarCall = runJobNowCall(id, _callback);
        return localVarCall;

    }

    /**
     * Run a job now
     * Queues a job to run now
     * @param id The id of the job to execute now (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job queued to execute </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job is already running </td><td>  -  </td></tr>
     </table>
     */
    public void runJobNow(Integer id) throws ApiException {
        runJobNowWithHttpInfo(id);
    }

    /**
     * Run a job now
     * Queues a job to run now
     * @param id The id of the job to execute now (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job queued to execute </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job is already running </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> runJobNowWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = runJobNowValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run a job now (asynchronously)
     * Queues a job to run now
     * @param id The id of the job to execute now (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job queued to execute </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job is already running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runJobNowAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = runJobNowValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateJob
     * @param id  (required)
     * @param jobIn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job updated successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Job could not be updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateJobCall(Integer id, JobIn jobIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobIn;

        // create path and map variables
        String localVarPath = "/job_api/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobValidateBeforeCall(Integer id, JobIn jobIn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateJob(Async)");
        }
        

        okhttp3.Call localVarCall = updateJobCall(id, jobIn, _callback);
        return localVarCall;

    }

    /**
     * Updates a single job
     * Updates a single job
     * @param id  (required)
     * @param jobIn  (optional)
     * @return SingleJobMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job updated successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Job could not be updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public SingleJobMessage updateJob(Integer id, JobIn jobIn) throws ApiException {
        ApiResponse<SingleJobMessage> localVarResp = updateJobWithHttpInfo(id, jobIn);
        return localVarResp.getData();
    }

    /**
     * Updates a single job
     * Updates a single job
     * @param id  (required)
     * @param jobIn  (optional)
     * @return ApiResponse&lt;SingleJobMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job updated successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Job could not be updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleJobMessage> updateJobWithHttpInfo(Integer id, JobIn jobIn) throws ApiException {
        okhttp3.Call localVarCall = updateJobValidateBeforeCall(id, jobIn, null);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a single job (asynchronously)
     * Updates a single job
     * @param id  (required)
     * @param jobIn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job updated successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Job could not be updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateJobAsync(Integer id, JobIn jobIn, final ApiCallback<SingleJobMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobValidateBeforeCall(id, jobIn, _callback);
        Type localVarReturnType = new TypeToken<SingleJobMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
