/*
 * BJR API V1
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.barrywalker.bjr.api;

import io.barrywalker.bjr.ApiException;
import io.barrywalker.bjr.model.JobArrayMessage;
import io.barrywalker.bjr.model.JobIn;
import io.barrywalker.bjr.model.JobRunArrayMessage;
import io.barrywalker.bjr.model.OccurrenceMessage;
import io.barrywalker.bjr.model.SingleJobMessage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Ignore
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    
    /**
     * Creates a job
     *
     * Creates a job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        JobIn jobIn = null;
        SingleJobMessage response = api.createJob(jobIn);

        // TODO: test validations
    }
    
    /**
     * Deletes a job
     *
     * Deletes a job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        Integer id = null;
        SingleJobMessage response = api.deleteJob(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a single job
     *
     * Retrieves a single job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        Integer id = null;
        SingleJobMessage response = api.getJob(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve the runs for a job
     *
     * Retrieve the runs for a job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobRunsTest() throws ApiException {
        Integer id = null;
        Integer perPage = null;
        Integer page = null;
        Boolean succeeded = null;
        String startDate = null;
        String endDate = null;
        String timezone = null;
        JobRunArrayMessage response = api.getJobRuns(id, perPage, page, succeeded, startDate, endDate, timezone);

        // TODO: test validations
    }
    
    /**
     * Retrieves jobs
     *
     * Retrieves jobs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        String tags = null;
        String incexc = null;
        String startDate = null;
        String endDate = null;
        Boolean enabled = null;
        Boolean succeeded = null;
        Boolean running = null;
        String name = null;
        String searchTimezone = null;
        String command = null;
        String timezone = null;
        Integer perPage = null;
        Integer page = null;
        JobArrayMessage response = api.getJobs(tags, incexc, startDate, endDate, enabled, succeeded, running, name, searchTimezone, command, timezone, perPage, page);

        // TODO: test validations
    }
    
    /**
     * Upcoming job occurrences
     *
     * Retrieves a list of upcoming occurrences for a job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobOccurrencesTest() throws ApiException {
        Integer id = null;
        String endDate = null;
        Integer perPage = null;
        Integer page = null;
        String timezone = null;
        OccurrenceMessage response = api.jobOccurrences(id, endDate, perPage, page, timezone);

        // TODO: test validations
    }
    
    /**
     * Run a job now
     *
     * Queues a job to run now
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runJobNowTest() throws ApiException {
        Integer id = null;
        api.runJobNow(id);

        // TODO: test validations
    }
    
    /**
     * Updates a single job
     *
     * Updates a single job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateJobTest() throws ApiException {
        Integer id = null;
        JobIn jobIn = null;
        SingleJobMessage response = api.updateJob(id, jobIn);

        // TODO: test validations
    }
    
}
