/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using BJR.Client;
using BJR.Api;
// uncomment below to import models
//using BJR.Model;

namespace BJR.Test.Api
{
    /// <summary>
    ///  Class for testing JobServerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class JobServerApiTests : IDisposable
    {
        private JobServerApi instance;

        public JobServerApiTests()
        {
            instance = new JobServerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of JobServerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' JobServerApi
            //Assert.IsType<JobServerApi>(instance);
        }

        /// <summary>
        /// Test GetBusyThreadCount
        /// </summary>
        [Fact]
        public void GetBusyThreadCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBusyThreadCount();
            //Assert.IsType<BusyThreadCountMessage>(response);
        }

        /// <summary>
        /// Test QuiesceNode
        /// </summary>
        [Fact]
        public void QuiesceNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string host = null;
            //var response = instance.QuiesceNode(host);
            //Assert.IsType<GenericMessage>(response);
        }

        /// <summary>
        /// Test RecentJobs
        /// </summary>
        [Fact]
        public void RecentJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? count = null;
            //var response = instance.RecentJobs(count);
            //Assert.IsType<JobArrayMessage>(response);
        }

        /// <summary>
        /// Test StatsByDay
        /// </summary>
        [Fact]
        public void StatsByDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string endDate = null;
            //int? perPage = null;
            //int? page = null;
            //string timezone = null;
            //var response = instance.StatsByDay(startDate, endDate, perPage, page, timezone);
            //Assert.IsType<JobStatMessage>(response);
        }

        /// <summary>
        /// Test StatsByHour
        /// </summary>
        [Fact]
        public void StatsByHourTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string endDate = null;
            //int? perPage = null;
            //int? page = null;
            //string timezone = null;
            //var response = instance.StatsByHour(startDate, endDate, perPage, page, timezone);
            //Assert.IsType<JobStatMessage>(response);
        }

        /// <summary>
        /// Test StatsByMinute
        /// </summary>
        [Fact]
        public void StatsByMinuteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string endDate = null;
            //int? perPage = null;
            //int? page = null;
            //string timezone = null;
            //var response = instance.StatsByMinute(startDate, endDate, perPage, page, timezone);
            //Assert.IsType<JobStatMessage>(response);
        }

        /// <summary>
        /// Test StatsByWeek
        /// </summary>
        [Fact]
        public void StatsByWeekTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string endDate = null;
            //int? perPage = null;
            //int? page = null;
            //string timezone = null;
            //var response = instance.StatsByWeek(startDate, endDate, perPage, page, timezone);
            //Assert.IsType<JobStatMessage>(response);
        }

        /// <summary>
        /// Test TodaysStats
        /// </summary>
        [Fact]
        public void TodaysStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string timezone = null;
            //var response = instance.TodaysStats(timezone);
            //Assert.IsType<TodaysStatsMessage>(response);
        }

        /// <summary>
        /// Test UpcomingJobs
        /// </summary>
        [Fact]
        public void UpcomingJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? count = null;
            //var response = instance.UpcomingJobs(count);
            //Assert.IsType<JobArrayMessage>(response);
        }
    }
}
