/* 
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BJR.Client.OpenAPIDateConverter;

namespace BJR.Model
{
    /// <summary>
    /// UserUpdateIn
    /// </summary>
    [DataContract]
    public partial class UserUpdateIn :  IEquatable<UserUpdateIn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdateIn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserUpdateIn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdateIn" /> class.
        /// </summary>
        /// <param name="password">The new user&#39;s password. (required).</param>
        /// <param name="passwordConfirmation">The new user&#39;s password confirmation. Must match &#39;password&#39;. (required).</param>
        public UserUpdateIn(string password = default(string), string passwordConfirmation = default(string))
        {
            // to ensure "password" is required (not null)
            this.Password = password ?? throw new ArgumentNullException("password is a required property for UserUpdateIn and cannot be null");
            // to ensure "passwordConfirmation" is required (not null)
            this.PasswordConfirmation = passwordConfirmation ?? throw new ArgumentNullException("passwordConfirmation is a required property for UserUpdateIn and cannot be null");
        }
        
        /// <summary>
        /// The new user&#39;s password.
        /// </summary>
        /// <value>The new user&#39;s password.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// The new user&#39;s password confirmation. Must match &#39;password&#39;.
        /// </summary>
        /// <value>The new user&#39;s password confirmation. Must match &#39;password&#39;.</value>
        [DataMember(Name="password_confirmation", EmitDefaultValue=false)]
        public string PasswordConfirmation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserUpdateIn {\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordConfirmation: ").Append(PasswordConfirmation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserUpdateIn);
        }

        /// <summary>
        /// Returns true if UserUpdateIn instances are equal
        /// </summary>
        /// <param name="input">Instance of UserUpdateIn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserUpdateIn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PasswordConfirmation == input.PasswordConfirmation ||
                    (this.PasswordConfirmation != null &&
                    this.PasswordConfirmation.Equals(input.PasswordConfirmation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.PasswordConfirmation != null)
                    hashCode = hashCode * 59 + this.PasswordConfirmation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
