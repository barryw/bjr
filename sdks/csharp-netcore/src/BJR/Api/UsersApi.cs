/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BJR.Client;
using BJR.Model;

namespace BJR.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Create a new user. Only root users are allowed to create new users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <returns>SingleUserMessage</returns>
        SingleUserMessage CreateUser(UserNewIn userNewIn = default(UserNewIn));

        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Create a new user. Only root users are allowed to create new users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        ApiResponse<SingleUserMessage> CreateUserWithHttpInfo(UserNewIn userNewIn = default(UserNewIn));
        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Deletes a user. Only root users can delete other users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleUserMessage</returns>
        SingleUserMessage DeleteUser(int id);

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Deletes a user. Only root users can delete other users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        ApiResponse<SingleUserMessage> DeleteUserWithHttpInfo(int id);
        /// <summary>
        /// Retrieve a single user
        /// </summary>
        /// <remarks>
        /// Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleUserMessage</returns>
        SingleUserMessage GetUser(int id);

        /// <summary>
        /// Retrieve a single user
        /// </summary>
        /// <remarks>
        /// Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        ApiResponse<SingleUserMessage> GetUserWithHttpInfo(int id);
        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <remarks>
        /// Get a list of users
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>UserArrayMessage</returns>
        UserArrayMessage GetUsers(int? perPage = default(int?), int? page = default(int?));

        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <remarks>
        /// Get a list of users
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of UserArrayMessage</returns>
        ApiResponse<UserArrayMessage> GetUsersWithHttpInfo(int? perPage = default(int?), int? page = default(int?));
        /// <summary>
        /// Update a single user
        /// </summary>
        /// <remarks>
        /// Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <returns>SingleUserMessage</returns>
        SingleUserMessage UpdateUser(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn));

        /// <summary>
        /// Update a single user
        /// </summary>
        /// <remarks>
        /// Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        ApiResponse<SingleUserMessage> UpdateUserWithHttpInfo(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Create a new user. Only root users are allowed to create new users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        System.Threading.Tasks.Task<SingleUserMessage> CreateUserAsync(UserNewIn userNewIn = default(UserNewIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Create a new user. Only root users are allowed to create new users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleUserMessage>> CreateUserWithHttpInfoAsync(UserNewIn userNewIn = default(UserNewIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Deletes a user. Only root users can delete other users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        System.Threading.Tasks.Task<SingleUserMessage> DeleteUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Deletes a user. Only root users can delete other users.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleUserMessage>> DeleteUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a single user
        /// </summary>
        /// <remarks>
        /// Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        System.Threading.Tasks.Task<SingleUserMessage> GetUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a single user
        /// </summary>
        /// <remarks>
        /// Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleUserMessage>> GetUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <remarks>
        /// Get a list of users
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserArrayMessage</returns>
        System.Threading.Tasks.Task<UserArrayMessage> GetUsersAsync(int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <remarks>
        /// Get a list of users
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserArrayMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserArrayMessage>> GetUsersWithHttpInfoAsync(int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a single user
        /// </summary>
        /// <remarks>
        /// Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        System.Threading.Tasks.Task<SingleUserMessage> UpdateUserAsync(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a single user
        /// </summary>
        /// <remarks>
        /// Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleUserMessage>> UpdateUserWithHttpInfoAsync(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private BJR.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = BJR.Client.Configuration.MergeConfigurations(
                BJR.Client.GlobalConfiguration.Instance,
                new BJR.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(BJR.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BJR.Client.Configuration.MergeConfigurations(
                BJR.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BJR.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(BJR.Client.ISynchronousClient client, BJR.Client.IAsynchronousClient asyncClient, BJR.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BJR.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BJR.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BJR.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BJR.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a user Create a new user. Only root users are allowed to create new users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <returns>SingleUserMessage</returns>
        public SingleUserMessage CreateUser(UserNewIn userNewIn = default(UserNewIn))
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = CreateUserWithHttpInfo(userNewIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a user Create a new user. Only root users are allowed to create new users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        public BJR.Client.ApiResponse<SingleUserMessage> CreateUserWithHttpInfo(UserNewIn userNewIn = default(UserNewIn))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userNewIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SingleUserMessage>("/user_api", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a user Create a new user. Only root users are allowed to create new users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        public async System.Threading.Tasks.Task<SingleUserMessage> CreateUserAsync(UserNewIn userNewIn = default(UserNewIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = await CreateUserWithHttpInfoAsync(userNewIn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a user Create a new user. Only root users are allowed to create new users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userNewIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleUserMessage>> CreateUserWithHttpInfoAsync(UserNewIn userNewIn = default(UserNewIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userNewIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SingleUserMessage>("/user_api", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a user Deletes a user. Only root users can delete other users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleUserMessage</returns>
        public SingleUserMessage DeleteUser(int id)
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = DeleteUserWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a user Deletes a user. Only root users can delete other users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        public BJR.Client.ApiResponse<SingleUserMessage> DeleteUserWithHttpInfo(int id)
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SingleUserMessage>("/user_api/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a user Deletes a user. Only root users can delete other users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        public async System.Threading.Tasks.Task<SingleUserMessage> DeleteUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = await DeleteUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a user Deletes a user. Only root users can delete other users.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleUserMessage>> DeleteUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SingleUserMessage>("/user_api/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single user Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleUserMessage</returns>
        public SingleUserMessage GetUser(int id)
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = GetUserWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single user Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        public BJR.Client.ApiResponse<SingleUserMessage> GetUserWithHttpInfo(int id)
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleUserMessage>("/user_api/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single user Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        public async System.Threading.Tasks.Task<SingleUserMessage> GetUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = await GetUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single user Retrieve a single user. If you&#39;re a non-root user, then you can only retrieve your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleUserMessage>> GetUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleUserMessage>("/user_api/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves users Get a list of users
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>UserArrayMessage</returns>
        public UserArrayMessage GetUsers(int? perPage = default(int?), int? page = default(int?))
        {
            BJR.Client.ApiResponse<UserArrayMessage> localVarResponse = GetUsersWithHttpInfo(perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves users Get a list of users
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of UserArrayMessage</returns>
        public BJR.Client.ApiResponse<UserArrayMessage> GetUsersWithHttpInfo(int? perPage = default(int?), int? page = default(int?))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserArrayMessage>("/user_api", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves users Get a list of users
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserArrayMessage</returns>
        public async System.Threading.Tasks.Task<UserArrayMessage> GetUsersAsync(int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<UserArrayMessage> localVarResponse = await GetUsersWithHttpInfoAsync(perPage, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves users Get a list of users
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserArrayMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<UserArrayMessage>> GetUsersWithHttpInfoAsync(int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserArrayMessage>("/user_api", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single user Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <returns>SingleUserMessage</returns>
        public SingleUserMessage UpdateUser(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn))
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = UpdateUserWithHttpInfo(id, userUpdateIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single user Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <returns>ApiResponse of SingleUserMessage</returns>
        public BJR.Client.ApiResponse<SingleUserMessage> UpdateUserWithHttpInfo(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userUpdateIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SingleUserMessage>("/user_api/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single user Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUserMessage</returns>
        public async System.Threading.Tasks.Task<SingleUserMessage> UpdateUserAsync(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleUserMessage> localVarResponse = await UpdateUserWithHttpInfoAsync(id, userUpdateIn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single user Update a single user. If you&#39;re a non-root users, then you can only update your own user.
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdateIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUserMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleUserMessage>> UpdateUserWithHttpInfoAsync(int id, UserUpdateIn userUpdateIn = default(UserUpdateIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userUpdateIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SingleUserMessage>("/user_api/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
