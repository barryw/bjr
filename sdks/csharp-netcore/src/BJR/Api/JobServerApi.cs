/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BJR.Client;
using BJR.Model;

namespace BJR.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobServerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <remarks>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BusyThreadCountMessage</returns>
        BusyThreadCountMessage GetBusyThreadCount();

        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <remarks>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BusyThreadCountMessage</returns>
        ApiResponse<BusyThreadCountMessage> GetBusyThreadCountWithHttpInfo();
        /// <summary>
        /// Quiesce a single worker pod/node
        /// </summary>
        /// <remarks>
        /// Quiesce a single worker pod/node
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <returns>GenericMessage</returns>
        GenericMessage QuiesceNode(string host);

        /// <summary>
        /// Quiesce a single worker pod/node
        /// </summary>
        /// <remarks>
        /// Quiesce a single worker pod/node
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <returns>ApiResponse of GenericMessage</returns>
        ApiResponse<GenericMessage> QuiesceNodeWithHttpInfo(string host);
        /// <summary>
        /// List of recent jobs
        /// </summary>
        /// <remarks>
        /// Get a list of the most recently run jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>JobArrayMessage</returns>
        JobArrayMessage RecentJobs(int? count = default(int?));

        /// <summary>
        /// List of recent jobs
        /// </summary>
        /// <remarks>
        /// Get a list of the most recently run jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        ApiResponse<JobArrayMessage> RecentJobsWithHttpInfo(int? count = default(int?));
        /// <summary>
        /// Job statistics by day
        /// </summary>
        /// <remarks>
        /// Get daily job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        JobStatMessage StatsByDay(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));

        /// <summary>
        /// Job statistics by day
        /// </summary>
        /// <remarks>
        /// Get daily job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        ApiResponse<JobStatMessage> StatsByDayWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));
        /// <summary>
        /// Job statistics by hour
        /// </summary>
        /// <remarks>
        /// Get hourly job statistics for the day
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        JobStatMessage StatsByHour(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));

        /// <summary>
        /// Job statistics by hour
        /// </summary>
        /// <remarks>
        /// Get hourly job statistics for the day
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        ApiResponse<JobStatMessage> StatsByHourWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));
        /// <summary>
        /// Job statistics by minute
        /// </summary>
        /// <remarks>
        /// Get minutely job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        JobStatMessage StatsByMinute(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));

        /// <summary>
        /// Job statistics by minute
        /// </summary>
        /// <remarks>
        /// Get minutely job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        ApiResponse<JobStatMessage> StatsByMinuteWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));
        /// <summary>
        /// Job statistics by week
        /// </summary>
        /// <remarks>
        /// Get weekly job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        JobStatMessage StatsByWeek(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));

        /// <summary>
        /// Job statistics by week
        /// </summary>
        /// <remarks>
        /// Get weekly job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        ApiResponse<JobStatMessage> StatsByWeekWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string));
        /// <summary>
        /// Todays Stats
        /// </summary>
        /// <remarks>
        /// Get the high level job statistics for today
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <returns>TodaysStatsMessage</returns>
        TodaysStatsMessage TodaysStats(string timezone = default(string));

        /// <summary>
        /// Todays Stats
        /// </summary>
        /// <remarks>
        /// Get the high level job statistics for today
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of TodaysStatsMessage</returns>
        ApiResponse<TodaysStatsMessage> TodaysStatsWithHttpInfo(string timezone = default(string));
        /// <summary>
        /// List of upcoming jobs
        /// </summary>
        /// <remarks>
        /// A list of jobs that are about to execute
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>JobArrayMessage</returns>
        JobArrayMessage UpcomingJobs(int? count = default(int?));

        /// <summary>
        /// List of upcoming jobs
        /// </summary>
        /// <remarks>
        /// A list of jobs that are about to execute
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        ApiResponse<JobArrayMessage> UpcomingJobsWithHttpInfo(int? count = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobServerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <remarks>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusyThreadCountMessage</returns>
        System.Threading.Tasks.Task<BusyThreadCountMessage> GetBusyThreadCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <remarks>
        /// Retrieve the count of busy workers across worker pods/nodes
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusyThreadCountMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusyThreadCountMessage>> GetBusyThreadCountWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Quiesce a single worker pod/node
        /// </summary>
        /// <remarks>
        /// Quiesce a single worker pod/node
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericMessage</returns>
        System.Threading.Tasks.Task<GenericMessage> QuiesceNodeAsync(string host, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Quiesce a single worker pod/node
        /// </summary>
        /// <remarks>
        /// Quiesce a single worker pod/node
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericMessage>> QuiesceNodeWithHttpInfoAsync(string host, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of recent jobs
        /// </summary>
        /// <remarks>
        /// Get a list of the most recently run jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobArrayMessage</returns>
        System.Threading.Tasks.Task<JobArrayMessage> RecentJobsAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of recent jobs
        /// </summary>
        /// <remarks>
        /// Get a list of the most recently run jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobArrayMessage>> RecentJobsWithHttpInfoAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Job statistics by day
        /// </summary>
        /// <remarks>
        /// Get daily job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        System.Threading.Tasks.Task<JobStatMessage> StatsByDayAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Job statistics by day
        /// </summary>
        /// <remarks>
        /// Get daily job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatMessage>> StatsByDayWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Job statistics by hour
        /// </summary>
        /// <remarks>
        /// Get hourly job statistics for the day
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        System.Threading.Tasks.Task<JobStatMessage> StatsByHourAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Job statistics by hour
        /// </summary>
        /// <remarks>
        /// Get hourly job statistics for the day
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatMessage>> StatsByHourWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Job statistics by minute
        /// </summary>
        /// <remarks>
        /// Get minutely job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        System.Threading.Tasks.Task<JobStatMessage> StatsByMinuteAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Job statistics by minute
        /// </summary>
        /// <remarks>
        /// Get minutely job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatMessage>> StatsByMinuteWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Job statistics by week
        /// </summary>
        /// <remarks>
        /// Get weekly job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        System.Threading.Tasks.Task<JobStatMessage> StatsByWeekAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Job statistics by week
        /// </summary>
        /// <remarks>
        /// Get weekly job statistics
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatMessage>> StatsByWeekWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Todays Stats
        /// </summary>
        /// <remarks>
        /// Get the high level job statistics for today
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TodaysStatsMessage</returns>
        System.Threading.Tasks.Task<TodaysStatsMessage> TodaysStatsAsync(string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Todays Stats
        /// </summary>
        /// <remarks>
        /// Get the high level job statistics for today
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TodaysStatsMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TodaysStatsMessage>> TodaysStatsWithHttpInfoAsync(string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of upcoming jobs
        /// </summary>
        /// <remarks>
        /// A list of jobs that are about to execute
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobArrayMessage</returns>
        System.Threading.Tasks.Task<JobArrayMessage> UpcomingJobsAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of upcoming jobs
        /// </summary>
        /// <remarks>
        /// A list of jobs that are about to execute
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobArrayMessage>> UpcomingJobsWithHttpInfoAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobServerApi : IJobServerApiSync, IJobServerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobServerApi : IJobServerApi
    {
        private BJR.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobServerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobServerApi(String basePath)
        {
            this.Configuration = BJR.Client.Configuration.MergeConfigurations(
                BJR.Client.GlobalConfiguration.Instance,
                new BJR.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobServerApi(BJR.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BJR.Client.Configuration.MergeConfigurations(
                BJR.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BJR.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobServerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobServerApi(BJR.Client.ISynchronousClient client, BJR.Client.IAsynchronousClient asyncClient, BJR.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BJR.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BJR.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BJR.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BJR.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BusyThreadCountMessage</returns>
        public BusyThreadCountMessage GetBusyThreadCount()
        {
            BJR.Client.ApiResponse<BusyThreadCountMessage> localVarResponse = GetBusyThreadCountWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BusyThreadCountMessage</returns>
        public BJR.Client.ApiResponse<BusyThreadCountMessage> GetBusyThreadCountWithHttpInfo()
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BusyThreadCountMessage>("/job_server_api/busy_thread_count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusyThreadCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BusyThreadCountMessage</returns>
        public async System.Threading.Tasks.Task<BusyThreadCountMessage> GetBusyThreadCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<BusyThreadCountMessage> localVarResponse = await GetBusyThreadCountWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the count of busy workers across worker pods/nodes Retrieve the count of busy workers across worker pods/nodes
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BusyThreadCountMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<BusyThreadCountMessage>> GetBusyThreadCountWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BusyThreadCountMessage>("/job_server_api/busy_thread_count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusyThreadCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quiesce a single worker pod/node Quiesce a single worker pod/node
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <returns>GenericMessage</returns>
        public GenericMessage QuiesceNode(string host)
        {
            BJR.Client.ApiResponse<GenericMessage> localVarResponse = QuiesceNodeWithHttpInfo(host);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quiesce a single worker pod/node Quiesce a single worker pod/node
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <returns>ApiResponse of GenericMessage</returns>
        public BJR.Client.ApiResponse<GenericMessage> QuiesceNodeWithHttpInfo(string host)
        {
            // verify the required parameter 'host' is set
            if (host == null)
                throw new BJR.Client.ApiException(400, "Missing required parameter 'host' when calling JobServerApi->QuiesceNode");

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "host", host));

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenericMessage>("/job_server_api/quiesce_worker", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuiesceNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quiesce a single worker pod/node Quiesce a single worker pod/node
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericMessage</returns>
        public async System.Threading.Tasks.Task<GenericMessage> QuiesceNodeAsync(string host, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<GenericMessage> localVarResponse = await QuiesceNodeWithHttpInfoAsync(host, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quiesce a single worker pod/node Quiesce a single worker pod/node
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The hostname of the worker pod/node to quiesce</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<GenericMessage>> QuiesceNodeWithHttpInfoAsync(string host, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'host' is set
            if (host == null)
                throw new BJR.Client.ApiException(400, "Missing required parameter 'host' when calling JobServerApi->QuiesceNode");


            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "host", host));

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GenericMessage>("/job_server_api/quiesce_worker", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuiesceNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of recent jobs Get a list of the most recently run jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>JobArrayMessage</returns>
        public JobArrayMessage RecentJobs(int? count = default(int?))
        {
            BJR.Client.ApiResponse<JobArrayMessage> localVarResponse = RecentJobsWithHttpInfo(count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of recent jobs Get a list of the most recently run jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        public BJR.Client.ApiResponse<JobArrayMessage> RecentJobsWithHttpInfo(int? count = default(int?))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobArrayMessage>("/job_server_api/recent_jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecentJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of recent jobs Get a list of the most recently run jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobArrayMessage</returns>
        public async System.Threading.Tasks.Task<JobArrayMessage> RecentJobsAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobArrayMessage> localVarResponse = await RecentJobsWithHttpInfoAsync(count, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of recent jobs Get a list of the most recently run jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobArrayMessage>> RecentJobsWithHttpInfoAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobArrayMessage>("/job_server_api/recent_jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecentJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by day Get daily job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        public JobStatMessage StatsByDay(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = StatsByDayWithHttpInfo(startDate, endDate, perPage, page, timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by day Get daily job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        public BJR.Client.ApiResponse<JobStatMessage> StatsByDayWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobStatMessage>("/job_server_api/daily_job_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByDay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by day Get daily job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        public async System.Threading.Tasks.Task<JobStatMessage> StatsByDayAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = await StatsByDayWithHttpInfoAsync(startDate, endDate, perPage, page, timezone, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by day Get daily job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get daily metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get daily metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobStatMessage>> StatsByDayWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatMessage>("/job_server_api/daily_job_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByDay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by hour Get hourly job statistics for the day
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        public JobStatMessage StatsByHour(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = StatsByHourWithHttpInfo(startDate, endDate, perPage, page, timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by hour Get hourly job statistics for the day
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        public BJR.Client.ApiResponse<JobStatMessage> StatsByHourWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobStatMessage>("/job_server_api/hourly_job_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByHour", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by hour Get hourly job statistics for the day
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        public async System.Threading.Tasks.Task<JobStatMessage> StatsByHourAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = await StatsByHourWithHttpInfoAsync(startDate, endDate, perPage, page, timezone, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by hour Get hourly job statistics for the day
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get hourly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get hourly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobStatMessage>> StatsByHourWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatMessage>("/job_server_api/hourly_job_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByHour", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by minute Get minutely job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        public JobStatMessage StatsByMinute(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = StatsByMinuteWithHttpInfo(startDate, endDate, perPage, page, timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by minute Get minutely job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        public BJR.Client.ApiResponse<JobStatMessage> StatsByMinuteWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobStatMessage>("/job_server_api/minutely_job_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByMinute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by minute Get minutely job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        public async System.Threading.Tasks.Task<JobStatMessage> StatsByMinuteAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = await StatsByMinuteWithHttpInfoAsync(startDate, endDate, perPage, page, timezone, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by minute Get minutely job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get minutely metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get minutely metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobStatMessage>> StatsByMinuteWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatMessage>("/job_server_api/minutely_job_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByMinute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by week Get weekly job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobStatMessage</returns>
        public JobStatMessage StatsByWeek(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = StatsByWeekWithHttpInfo(startDate, endDate, perPage, page, timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by week Get weekly job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobStatMessage</returns>
        public BJR.Client.ApiResponse<JobStatMessage> StatsByWeekWithHttpInfo(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobStatMessage>("/job_server_api/weekly_job_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByWeek", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job statistics by week Get weekly job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatMessage</returns>
        public async System.Threading.Tasks.Task<JobStatMessage> StatsByWeekAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobStatMessage> localVarResponse = await StatsByWeekWithHttpInfoAsync(startDate, endDate, perPage, page, timezone, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job statistics by week Get weekly job statistics
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date from which to get weekly metrics from (optional)</param>
        /// <param name="endDate">The end date from which to get weekly metrics from (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobStatMessage>> StatsByWeekWithHttpInfoAsync(string startDate = default(string), string endDate = default(string), int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatMessage>("/job_server_api/weekly_job_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatsByWeek", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todays Stats Get the high level job statistics for today
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <returns>TodaysStatsMessage</returns>
        public TodaysStatsMessage TodaysStats(string timezone = default(string))
        {
            BJR.Client.ApiResponse<TodaysStatsMessage> localVarResponse = TodaysStatsWithHttpInfo(timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todays Stats Get the high level job statistics for today
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of TodaysStatsMessage</returns>
        public BJR.Client.ApiResponse<TodaysStatsMessage> TodaysStatsWithHttpInfo(string timezone = default(string))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TodaysStatsMessage>("/job_server_api/todays_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TodaysStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Todays Stats Get the high level job statistics for today
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TodaysStatsMessage</returns>
        public async System.Threading.Tasks.Task<TodaysStatsMessage> TodaysStatsAsync(string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<TodaysStatsMessage> localVarResponse = await TodaysStatsWithHttpInfoAsync(timezone, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Todays Stats Get the high level job statistics for today
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TodaysStatsMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<TodaysStatsMessage>> TodaysStatsWithHttpInfoAsync(string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TodaysStatsMessage>("/job_server_api/todays_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TodaysStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of upcoming jobs A list of jobs that are about to execute
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>JobArrayMessage</returns>
        public JobArrayMessage UpcomingJobs(int? count = default(int?))
        {
            BJR.Client.ApiResponse<JobArrayMessage> localVarResponse = UpcomingJobsWithHttpInfo(count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of upcoming jobs A list of jobs that are about to execute
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        public BJR.Client.ApiResponse<JobArrayMessage> UpcomingJobsWithHttpInfo(int? count = default(int?))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobArrayMessage>("/job_server_api/upcoming_jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpcomingJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of upcoming jobs A list of jobs that are about to execute
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobArrayMessage</returns>
        public async System.Threading.Tasks.Task<JobArrayMessage> UpcomingJobsAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobArrayMessage> localVarResponse = await UpcomingJobsWithHttpInfoAsync(count, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of upcoming jobs A list of jobs that are about to execute
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of jobs to return (max 20) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobArrayMessage>> UpcomingJobsWithHttpInfoAsync(int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobArrayMessage>("/job_server_api/upcoming_jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpcomingJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
