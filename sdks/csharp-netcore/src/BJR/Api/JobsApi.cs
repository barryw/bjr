/*
 * BJR API V1
 *
 * API specification for the BJR job server.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BJR.Client;
using BJR.Model;

namespace BJR.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage CreateJob(JobIn jobIn = default(JobIn));

        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> CreateJobWithHttpInfo(JobIn jobIn = default(JobIn));
        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage DeleteJob(int id);

        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> DeleteJobWithHttpInfo(int id);
        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage GetJob(int id);

        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> GetJobWithHttpInfo(int id);
        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobRunArrayMessage</returns>
        JobRunArrayMessage GetJobRuns(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string));

        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobRunArrayMessage</returns>
        ApiResponse<JobRunArrayMessage> GetJobRunsWithHttpInfo(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string));
        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>JobArrayMessage</returns>
        JobArrayMessage GetJobs(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?));

        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        ApiResponse<JobArrayMessage> GetJobsWithHttpInfo(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?));
        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>OccurrenceMessage</returns>
        OccurrenceMessage JobOccurrences(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string));

        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of OccurrenceMessage</returns>
        ApiResponse<OccurrenceMessage> JobOccurrencesWithHttpInfo(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string));
        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns></returns>
        void RunJobNow(int id);

        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunJobNowWithHttpInfo(int id);
        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        SingleJobMessage UpdateJob(int id, JobIn jobIn = default(JobIn));

        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        ApiResponse<SingleJobMessage> UpdateJobWithHttpInfo(int id, JobIn jobIn = default(JobIn));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> CreateJobAsync(JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a job
        /// </summary>
        /// <remarks>
        /// Creates a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> CreateJobWithHttpInfoAsync(JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> DeleteJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <remarks>
        /// Deletes a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> DeleteJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> GetJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a single job
        /// </summary>
        /// <remarks>
        /// Retrieves a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> GetJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRunArrayMessage</returns>
        System.Threading.Tasks.Task<JobRunArrayMessage> GetJobRunsAsync(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the runs for a job
        /// </summary>
        /// <remarks>
        /// Retrieve the runs for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRunArrayMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRunArrayMessage>> GetJobRunsWithHttpInfoAsync(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobArrayMessage</returns>
        System.Threading.Tasks.Task<JobArrayMessage> GetJobsAsync(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves jobs
        /// </summary>
        /// <remarks>
        /// Retrieves jobs
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobArrayMessage>> GetJobsWithHttpInfoAsync(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OccurrenceMessage</returns>
        System.Threading.Tasks.Task<OccurrenceMessage> JobOccurrencesAsync(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upcoming job occurrences
        /// </summary>
        /// <remarks>
        /// Retrieves a list of upcoming occurrences for a job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OccurrenceMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<OccurrenceMessage>> JobOccurrencesWithHttpInfoAsync(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunJobNowAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run a job now
        /// </summary>
        /// <remarks>
        /// Queues a job to run now
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunJobNowWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        System.Threading.Tasks.Task<SingleJobMessage> UpdateJobAsync(int id, JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a single job
        /// </summary>
        /// <remarks>
        /// Updates a single job
        /// </remarks>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleJobMessage>> UpdateJobWithHttpInfoAsync(int id, JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IJobsApiSync, IJobsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private BJR.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = BJR.Client.Configuration.MergeConfigurations(
                BJR.Client.GlobalConfiguration.Instance,
                new BJR.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(BJR.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BJR.Client.Configuration.MergeConfigurations(
                BJR.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BJR.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BJR.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobsApi(BJR.Client.ISynchronousClient client, BJR.Client.IAsynchronousClient asyncClient, BJR.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BJR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BJR.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BJR.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BJR.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BJR.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage CreateJob(JobIn jobIn = default(JobIn))
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = CreateJobWithHttpInfo(jobIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public BJR.Client.ApiResponse<SingleJobMessage> CreateJobWithHttpInfo(JobIn jobIn = default(JobIn))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SingleJobMessage>("/job_api", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> CreateJobAsync(JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = await CreateJobWithHttpInfoAsync(jobIn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a job Creates a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleJobMessage>> CreateJobWithHttpInfoAsync(JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jobIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SingleJobMessage>("/job_api", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage DeleteJob(int id)
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = DeleteJobWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public BJR.Client.ApiResponse<SingleJobMessage> DeleteJobWithHttpInfo(int id)
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SingleJobMessage>("/job_api/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> DeleteJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = await DeleteJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a job Deletes a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleJobMessage>> DeleteJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SingleJobMessage>("/job_api/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage GetJob(int id)
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = GetJobWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public BJR.Client.ApiResponse<SingleJobMessage> GetJobWithHttpInfo(int id)
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleJobMessage>("/job_api/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> GetJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = await GetJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single job Retrieves a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleJobMessage>> GetJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleJobMessage>("/job_api/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>JobRunArrayMessage</returns>
        public JobRunArrayMessage GetJobRuns(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string))
        {
            BJR.Client.ApiResponse<JobRunArrayMessage> localVarResponse = GetJobRunsWithHttpInfo(id, perPage, page, succeeded, startDate, endDate, timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of JobRunArrayMessage</returns>
        public BJR.Client.ApiResponse<JobRunArrayMessage> GetJobRunsWithHttpInfo(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (succeeded != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "succeeded", succeeded));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobRunArrayMessage>("/job_api/{id}/runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRunArrayMessage</returns>
        public async System.Threading.Tasks.Task<JobRunArrayMessage> GetJobRunsAsync(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobRunArrayMessage> localVarResponse = await GetJobRunsWithHttpInfoAsync(id, perPage, page, succeeded, startDate, endDate, timezone, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the runs for a job Retrieve the runs for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="succeeded"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRunArrayMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobRunArrayMessage>> GetJobRunsWithHttpInfoAsync(int id, int? perPage = default(int?), int? page = default(int?), bool? succeeded = default(bool?), string startDate = default(string), string endDate = default(string), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (succeeded != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "succeeded", succeeded));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobRunArrayMessage>("/job_api/{id}/runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>JobArrayMessage</returns>
        public JobArrayMessage GetJobs(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?))
        {
            BJR.Client.ApiResponse<JobArrayMessage> localVarResponse = GetJobsWithHttpInfo(expression, timezone, perPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of JobArrayMessage</returns>
        public BJR.Client.ApiResponse<JobArrayMessage> GetJobsWithHttpInfo(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (expression != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "expression", expression));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobArrayMessage>("/job_api", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobArrayMessage</returns>
        public async System.Threading.Tasks.Task<JobArrayMessage> GetJobsAsync(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<JobArrayMessage> localVarResponse = await GetJobsWithHttpInfoAsync(expression, timezone, perPage, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves jobs Retrieves jobs
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expression">A search expression to filter jobs. (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobArrayMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<JobArrayMessage>> GetJobsWithHttpInfoAsync(string expression = default(string), string timezone = default(string), int? perPage = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (expression != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "expression", expression));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobArrayMessage>("/job_api", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>OccurrenceMessage</returns>
        public OccurrenceMessage JobOccurrences(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            BJR.Client.ApiResponse<OccurrenceMessage> localVarResponse = JobOccurrencesWithHttpInfo(id, endDate, perPage, page, timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <returns>ApiResponse of OccurrenceMessage</returns>
        public BJR.Client.ApiResponse<OccurrenceMessage> JobOccurrencesWithHttpInfo(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string))
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new BJR.Client.ApiException(400, "Missing required parameter 'endDate' when calling JobsApi->JobOccurrences");

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("end_date", BJR.Client.ClientUtils.ParameterToString(endDate)); // path parameter
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OccurrenceMessage>("/job_api/{id}/occurrences/{end_date}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobOccurrences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OccurrenceMessage</returns>
        public async System.Threading.Tasks.Task<OccurrenceMessage> JobOccurrencesAsync(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<OccurrenceMessage> localVarResponse = await JobOccurrencesWithHttpInfoAsync(id, endDate, perPage, page, timezone, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming job occurrences Retrieves a list of upcoming occurrences for a job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to retrieve occurrences for</param>
        /// <param name="endDate">The date to retrieve occurrences up to</param>
        /// <param name="perPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="timezone"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OccurrenceMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<OccurrenceMessage>> JobOccurrencesWithHttpInfoAsync(int id, string endDate, int? perPage = default(int?), int? page = default(int?), string timezone = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new BJR.Client.ApiException(400, "Missing required parameter 'endDate' when calling JobsApi->JobOccurrences");


            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("end_date", BJR.Client.ClientUtils.ParameterToString(endDate)); // path parameter
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(BJR.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OccurrenceMessage>("/job_api/{id}/occurrences/{end_date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobOccurrences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns></returns>
        public void RunJobNow(int id)
        {
            RunJobNowWithHttpInfo(id);
        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BJR.Client.ApiResponse<Object> RunJobNowWithHttpInfo(int id)
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/job_api/{id}/run_now", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunJobNow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunJobNowAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RunJobNowWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Run a job now Queues a job to run now
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job to execute now</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<Object>> RunJobNowWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/job_api/{id}/run_now", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunJobNow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>SingleJobMessage</returns>
        public SingleJobMessage UpdateJob(int id, JobIn jobIn = default(JobIn))
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = UpdateJobWithHttpInfo(id, jobIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <returns>ApiResponse of SingleJobMessage</returns>
        public BJR.Client.ApiResponse<SingleJobMessage> UpdateJobWithHttpInfo(int id, JobIn jobIn = default(JobIn))
        {
            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SingleJobMessage>("/job_api/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleJobMessage</returns>
        public async System.Threading.Tasks.Task<SingleJobMessage> UpdateJobAsync(int id, JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BJR.Client.ApiResponse<SingleJobMessage> localVarResponse = await UpdateJobWithHttpInfoAsync(id, jobIn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a single job Updates a single job
        /// </summary>
        /// <exception cref="BJR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="jobIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleJobMessage)</returns>
        public async System.Threading.Tasks.Task<BJR.Client.ApiResponse<SingleJobMessage>> UpdateJobWithHttpInfoAsync(int id, JobIn jobIn = default(JobIn), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BJR.Client.RequestOptions localVarRequestOptions = new BJR.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = BJR.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BJR.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BJR.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobIn;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SingleJobMessage>("/job_api/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
