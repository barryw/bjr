# coding: utf-8

"""
    BJR API V1

    API specification for the BJR job server.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bjr4py.configuration import Configuration


class TodaysStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_jobs': 'int',
        'total_jobs_trend': 'float',
        'enabled_jobs': 'int',
        'enabled_jobs_trend': 'float',
        'run_jobs': 'int',
        'run_jobs_trend': 'float',
        'failed_jobs': 'int',
        'failed_jobs_trend': 'float',
        'avg_job_runtime': 'float',
        'avg_job_runtime_trend': 'float',
        'max_job_runtime': 'float',
        'max_job_runtime_trend': 'float',
        'min_job_runtime': 'float',
        'min_job_runtime_trend': 'float',
        'avg_job_lag': 'float',
        'avg_job_lag_trend': 'float',
        'max_job_lag': 'float',
        'max_job_lag_trend': 'float',
        'min_job_lag': 'float',
        'min_job_lag_trend': 'float'
    }

    attribute_map = {
        'total_jobs': 'total_jobs',
        'total_jobs_trend': 'total_jobs_trend',
        'enabled_jobs': 'enabled_jobs',
        'enabled_jobs_trend': 'enabled_jobs_trend',
        'run_jobs': 'run_jobs',
        'run_jobs_trend': 'run_jobs_trend',
        'failed_jobs': 'failed_jobs',
        'failed_jobs_trend': 'failed_jobs_trend',
        'avg_job_runtime': 'avg_job_runtime',
        'avg_job_runtime_trend': 'avg_job_runtime_trend',
        'max_job_runtime': 'max_job_runtime',
        'max_job_runtime_trend': 'max_job_runtime_trend',
        'min_job_runtime': 'min_job_runtime',
        'min_job_runtime_trend': 'min_job_runtime_trend',
        'avg_job_lag': 'avg_job_lag',
        'avg_job_lag_trend': 'avg_job_lag_trend',
        'max_job_lag': 'max_job_lag',
        'max_job_lag_trend': 'max_job_lag_trend',
        'min_job_lag': 'min_job_lag',
        'min_job_lag_trend': 'min_job_lag_trend'
    }

    def __init__(self, total_jobs=None, total_jobs_trend=None, enabled_jobs=None, enabled_jobs_trend=None, run_jobs=None, run_jobs_trend=None, failed_jobs=None, failed_jobs_trend=None, avg_job_runtime=None, avg_job_runtime_trend=None, max_job_runtime=None, max_job_runtime_trend=None, min_job_runtime=None, min_job_runtime_trend=None, avg_job_lag=None, avg_job_lag_trend=None, max_job_lag=None, max_job_lag_trend=None, min_job_lag=None, min_job_lag_trend=None, local_vars_configuration=None):  # noqa: E501
        """TodaysStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_jobs = None
        self._total_jobs_trend = None
        self._enabled_jobs = None
        self._enabled_jobs_trend = None
        self._run_jobs = None
        self._run_jobs_trend = None
        self._failed_jobs = None
        self._failed_jobs_trend = None
        self._avg_job_runtime = None
        self._avg_job_runtime_trend = None
        self._max_job_runtime = None
        self._max_job_runtime_trend = None
        self._min_job_runtime = None
        self._min_job_runtime_trend = None
        self._avg_job_lag = None
        self._avg_job_lag_trend = None
        self._max_job_lag = None
        self._max_job_lag_trend = None
        self._min_job_lag = None
        self._min_job_lag_trend = None
        self.discriminator = None

        if total_jobs is not None:
            self.total_jobs = total_jobs
        if total_jobs_trend is not None:
            self.total_jobs_trend = total_jobs_trend
        if enabled_jobs is not None:
            self.enabled_jobs = enabled_jobs
        if enabled_jobs_trend is not None:
            self.enabled_jobs_trend = enabled_jobs_trend
        if run_jobs is not None:
            self.run_jobs = run_jobs
        if run_jobs_trend is not None:
            self.run_jobs_trend = run_jobs_trend
        if failed_jobs is not None:
            self.failed_jobs = failed_jobs
        if failed_jobs_trend is not None:
            self.failed_jobs_trend = failed_jobs_trend
        if avg_job_runtime is not None:
            self.avg_job_runtime = avg_job_runtime
        if avg_job_runtime_trend is not None:
            self.avg_job_runtime_trend = avg_job_runtime_trend
        if max_job_runtime is not None:
            self.max_job_runtime = max_job_runtime
        if max_job_runtime_trend is not None:
            self.max_job_runtime_trend = max_job_runtime_trend
        if min_job_runtime is not None:
            self.min_job_runtime = min_job_runtime
        if min_job_runtime_trend is not None:
            self.min_job_runtime_trend = min_job_runtime_trend
        if avg_job_lag is not None:
            self.avg_job_lag = avg_job_lag
        if avg_job_lag_trend is not None:
            self.avg_job_lag_trend = avg_job_lag_trend
        if max_job_lag is not None:
            self.max_job_lag = max_job_lag
        if max_job_lag_trend is not None:
            self.max_job_lag_trend = max_job_lag_trend
        if min_job_lag is not None:
            self.min_job_lag = min_job_lag
        if min_job_lag_trend is not None:
            self.min_job_lag_trend = min_job_lag_trend

    @property
    def total_jobs(self):
        """Gets the total_jobs of this TodaysStats.  # noqa: E501

        The total number of jobs that are scheduled.  # noqa: E501

        :return: The total_jobs of this TodaysStats.  # noqa: E501
        :rtype: int
        """
        return self._total_jobs

    @total_jobs.setter
    def total_jobs(self, total_jobs):
        """Sets the total_jobs of this TodaysStats.

        The total number of jobs that are scheduled.  # noqa: E501

        :param total_jobs: The total_jobs of this TodaysStats.  # noqa: E501
        :type: int
        """

        self._total_jobs = total_jobs

    @property
    def total_jobs_trend(self):
        """Gets the total_jobs_trend of this TodaysStats.  # noqa: E501

        The trend direction of total_jobs.  # noqa: E501

        :return: The total_jobs_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._total_jobs_trend

    @total_jobs_trend.setter
    def total_jobs_trend(self, total_jobs_trend):
        """Sets the total_jobs_trend of this TodaysStats.

        The trend direction of total_jobs.  # noqa: E501

        :param total_jobs_trend: The total_jobs_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._total_jobs_trend = total_jobs_trend

    @property
    def enabled_jobs(self):
        """Gets the enabled_jobs of this TodaysStats.  # noqa: E501

        The total number of jobs that are enabled. This will be a subset of total_jobs.  # noqa: E501

        :return: The enabled_jobs of this TodaysStats.  # noqa: E501
        :rtype: int
        """
        return self._enabled_jobs

    @enabled_jobs.setter
    def enabled_jobs(self, enabled_jobs):
        """Sets the enabled_jobs of this TodaysStats.

        The total number of jobs that are enabled. This will be a subset of total_jobs.  # noqa: E501

        :param enabled_jobs: The enabled_jobs of this TodaysStats.  # noqa: E501
        :type: int
        """

        self._enabled_jobs = enabled_jobs

    @property
    def enabled_jobs_trend(self):
        """Gets the enabled_jobs_trend of this TodaysStats.  # noqa: E501

        The trend direction of enabled_jobs.  # noqa: E501

        :return: The enabled_jobs_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._enabled_jobs_trend

    @enabled_jobs_trend.setter
    def enabled_jobs_trend(self, enabled_jobs_trend):
        """Sets the enabled_jobs_trend of this TodaysStats.

        The trend direction of enabled_jobs.  # noqa: E501

        :param enabled_jobs_trend: The enabled_jobs_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._enabled_jobs_trend = enabled_jobs_trend

    @property
    def run_jobs(self):
        """Gets the run_jobs of this TodaysStats.  # noqa: E501

        The number of jobs that have been run today.  # noqa: E501

        :return: The run_jobs of this TodaysStats.  # noqa: E501
        :rtype: int
        """
        return self._run_jobs

    @run_jobs.setter
    def run_jobs(self, run_jobs):
        """Sets the run_jobs of this TodaysStats.

        The number of jobs that have been run today.  # noqa: E501

        :param run_jobs: The run_jobs of this TodaysStats.  # noqa: E501
        :type: int
        """

        self._run_jobs = run_jobs

    @property
    def run_jobs_trend(self):
        """Gets the run_jobs_trend of this TodaysStats.  # noqa: E501

        The trend direction of run_jobs.  # noqa: E501

        :return: The run_jobs_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._run_jobs_trend

    @run_jobs_trend.setter
    def run_jobs_trend(self, run_jobs_trend):
        """Sets the run_jobs_trend of this TodaysStats.

        The trend direction of run_jobs.  # noqa: E501

        :param run_jobs_trend: The run_jobs_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._run_jobs_trend = run_jobs_trend

    @property
    def failed_jobs(self):
        """Gets the failed_jobs of this TodaysStats.  # noqa: E501

        The number of jobs that have failed today.  # noqa: E501

        :return: The failed_jobs of this TodaysStats.  # noqa: E501
        :rtype: int
        """
        return self._failed_jobs

    @failed_jobs.setter
    def failed_jobs(self, failed_jobs):
        """Sets the failed_jobs of this TodaysStats.

        The number of jobs that have failed today.  # noqa: E501

        :param failed_jobs: The failed_jobs of this TodaysStats.  # noqa: E501
        :type: int
        """

        self._failed_jobs = failed_jobs

    @property
    def failed_jobs_trend(self):
        """Gets the failed_jobs_trend of this TodaysStats.  # noqa: E501

        The trend direction of failed_jobs.  # noqa: E501

        :return: The failed_jobs_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._failed_jobs_trend

    @failed_jobs_trend.setter
    def failed_jobs_trend(self, failed_jobs_trend):
        """Sets the failed_jobs_trend of this TodaysStats.

        The trend direction of failed_jobs.  # noqa: E501

        :param failed_jobs_trend: The failed_jobs_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._failed_jobs_trend = failed_jobs_trend

    @property
    def avg_job_runtime(self):
        """Gets the avg_job_runtime of this TodaysStats.  # noqa: E501

        The average job run time.  # noqa: E501

        :return: The avg_job_runtime of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._avg_job_runtime

    @avg_job_runtime.setter
    def avg_job_runtime(self, avg_job_runtime):
        """Sets the avg_job_runtime of this TodaysStats.

        The average job run time.  # noqa: E501

        :param avg_job_runtime: The avg_job_runtime of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._avg_job_runtime = avg_job_runtime

    @property
    def avg_job_runtime_trend(self):
        """Gets the avg_job_runtime_trend of this TodaysStats.  # noqa: E501

        The trend direction of avg_job_runtime.  # noqa: E501

        :return: The avg_job_runtime_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._avg_job_runtime_trend

    @avg_job_runtime_trend.setter
    def avg_job_runtime_trend(self, avg_job_runtime_trend):
        """Sets the avg_job_runtime_trend of this TodaysStats.

        The trend direction of avg_job_runtime.  # noqa: E501

        :param avg_job_runtime_trend: The avg_job_runtime_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._avg_job_runtime_trend = avg_job_runtime_trend

    @property
    def max_job_runtime(self):
        """Gets the max_job_runtime of this TodaysStats.  # noqa: E501

        The max job run time.  # noqa: E501

        :return: The max_job_runtime of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._max_job_runtime

    @max_job_runtime.setter
    def max_job_runtime(self, max_job_runtime):
        """Sets the max_job_runtime of this TodaysStats.

        The max job run time.  # noqa: E501

        :param max_job_runtime: The max_job_runtime of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._max_job_runtime = max_job_runtime

    @property
    def max_job_runtime_trend(self):
        """Gets the max_job_runtime_trend of this TodaysStats.  # noqa: E501

        The trend direction of max_job_runtime.  # noqa: E501

        :return: The max_job_runtime_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._max_job_runtime_trend

    @max_job_runtime_trend.setter
    def max_job_runtime_trend(self, max_job_runtime_trend):
        """Sets the max_job_runtime_trend of this TodaysStats.

        The trend direction of max_job_runtime.  # noqa: E501

        :param max_job_runtime_trend: The max_job_runtime_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._max_job_runtime_trend = max_job_runtime_trend

    @property
    def min_job_runtime(self):
        """Gets the min_job_runtime of this TodaysStats.  # noqa: E501

        The min job run time.  # noqa: E501

        :return: The min_job_runtime of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._min_job_runtime

    @min_job_runtime.setter
    def min_job_runtime(self, min_job_runtime):
        """Sets the min_job_runtime of this TodaysStats.

        The min job run time.  # noqa: E501

        :param min_job_runtime: The min_job_runtime of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._min_job_runtime = min_job_runtime

    @property
    def min_job_runtime_trend(self):
        """Gets the min_job_runtime_trend of this TodaysStats.  # noqa: E501

        The trend direction of min_job_runtime.  # noqa: E501

        :return: The min_job_runtime_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._min_job_runtime_trend

    @min_job_runtime_trend.setter
    def min_job_runtime_trend(self, min_job_runtime_trend):
        """Sets the min_job_runtime_trend of this TodaysStats.

        The trend direction of min_job_runtime.  # noqa: E501

        :param min_job_runtime_trend: The min_job_runtime_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._min_job_runtime_trend = min_job_runtime_trend

    @property
    def avg_job_lag(self):
        """Gets the avg_job_lag of this TodaysStats.  # noqa: E501

        The average job lag.  # noqa: E501

        :return: The avg_job_lag of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._avg_job_lag

    @avg_job_lag.setter
    def avg_job_lag(self, avg_job_lag):
        """Sets the avg_job_lag of this TodaysStats.

        The average job lag.  # noqa: E501

        :param avg_job_lag: The avg_job_lag of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._avg_job_lag = avg_job_lag

    @property
    def avg_job_lag_trend(self):
        """Gets the avg_job_lag_trend of this TodaysStats.  # noqa: E501

        The trend direction of avg_job_lag.  # noqa: E501

        :return: The avg_job_lag_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._avg_job_lag_trend

    @avg_job_lag_trend.setter
    def avg_job_lag_trend(self, avg_job_lag_trend):
        """Sets the avg_job_lag_trend of this TodaysStats.

        The trend direction of avg_job_lag.  # noqa: E501

        :param avg_job_lag_trend: The avg_job_lag_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._avg_job_lag_trend = avg_job_lag_trend

    @property
    def max_job_lag(self):
        """Gets the max_job_lag of this TodaysStats.  # noqa: E501

        The max job lag.  # noqa: E501

        :return: The max_job_lag of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._max_job_lag

    @max_job_lag.setter
    def max_job_lag(self, max_job_lag):
        """Sets the max_job_lag of this TodaysStats.

        The max job lag.  # noqa: E501

        :param max_job_lag: The max_job_lag of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._max_job_lag = max_job_lag

    @property
    def max_job_lag_trend(self):
        """Gets the max_job_lag_trend of this TodaysStats.  # noqa: E501

        The trend direction of max_job_lag.  # noqa: E501

        :return: The max_job_lag_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._max_job_lag_trend

    @max_job_lag_trend.setter
    def max_job_lag_trend(self, max_job_lag_trend):
        """Sets the max_job_lag_trend of this TodaysStats.

        The trend direction of max_job_lag.  # noqa: E501

        :param max_job_lag_trend: The max_job_lag_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._max_job_lag_trend = max_job_lag_trend

    @property
    def min_job_lag(self):
        """Gets the min_job_lag of this TodaysStats.  # noqa: E501

        The min job lag.  # noqa: E501

        :return: The min_job_lag of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._min_job_lag

    @min_job_lag.setter
    def min_job_lag(self, min_job_lag):
        """Sets the min_job_lag of this TodaysStats.

        The min job lag.  # noqa: E501

        :param min_job_lag: The min_job_lag of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._min_job_lag = min_job_lag

    @property
    def min_job_lag_trend(self):
        """Gets the min_job_lag_trend of this TodaysStats.  # noqa: E501

        The trend direction of min_job_lag.  # noqa: E501

        :return: The min_job_lag_trend of this TodaysStats.  # noqa: E501
        :rtype: float
        """
        return self._min_job_lag_trend

    @min_job_lag_trend.setter
    def min_job_lag_trend(self, min_job_lag_trend):
        """Sets the min_job_lag_trend of this TodaysStats.

        The trend direction of min_job_lag.  # noqa: E501

        :param min_job_lag_trend: The min_job_lag_trend of this TodaysStats.  # noqa: E501
        :type: float
        """

        self._min_job_lag_trend = min_job_lag_trend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TodaysStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TodaysStats):
            return True

        return self.to_dict() != other.to_dict()
