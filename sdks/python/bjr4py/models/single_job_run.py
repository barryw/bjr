# coding: utf-8

"""
    BJR API V1

    API specification for the BJR job server.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bjr4py.configuration import Configuration


class SingleJobRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'success': 'bool',
        'return_code': 'int',
        'error_message': 'str',
        'stdout': 'str',
        'stderr': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'scheduled_start_time': 'datetime',
        'schedule_diff_in_seconds': 'int',
        'job_id': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'success': 'success',
        'return_code': 'return_code',
        'error_message': 'error_message',
        'stdout': 'stdout',
        'stderr': 'stderr',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'scheduled_start_time': 'scheduled_start_time',
        'schedule_diff_in_seconds': 'schedule_diff_in_seconds',
        'job_id': 'job_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, success=None, return_code=None, error_message=None, stdout=None, stderr=None, start_time=None, end_time=None, scheduled_start_time=None, schedule_diff_in_seconds=None, job_id=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """SingleJobRun - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._success = None
        self._return_code = None
        self._error_message = None
        self._stdout = None
        self._stderr = None
        self._start_time = None
        self._end_time = None
        self._scheduled_start_time = None
        self._schedule_diff_in_seconds = None
        self._job_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if success is not None:
            self.success = success
        if return_code is not None:
            self.return_code = return_code
        self.error_message = error_message
        self.stdout = stdout
        self.stderr = stderr
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if scheduled_start_time is not None:
            self.scheduled_start_time = scheduled_start_time
        if schedule_diff_in_seconds is not None:
            self.schedule_diff_in_seconds = schedule_diff_in_seconds
        if job_id is not None:
            self.job_id = job_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this SingleJobRun.  # noqa: E501

        The object's primary key. This uniquely identifies the object in the system.  # noqa: E501

        :return: The id of this SingleJobRun.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SingleJobRun.

        The object's primary key. This uniquely identifies the object in the system.  # noqa: E501

        :param id: The id of this SingleJobRun.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def success(self):
        """Gets the success of this SingleJobRun.  # noqa: E501

        Whether the run was successful or not.  # noqa: E501

        :return: The success of this SingleJobRun.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this SingleJobRun.

        Whether the run was successful or not.  # noqa: E501

        :param success: The success of this SingleJobRun.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def return_code(self):
        """Gets the return_code of this SingleJobRun.  # noqa: E501

        The return code that the command exited with. 0 means success.  # noqa: E501

        :return: The return_code of this SingleJobRun.  # noqa: E501
        :rtype: int
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this SingleJobRun.

        The return code that the command exited with. 0 means success.  # noqa: E501

        :param return_code: The return_code of this SingleJobRun.  # noqa: E501
        :type: int
        """

        self._return_code = return_code

    @property
    def error_message(self):
        """Gets the error_message of this SingleJobRun.  # noqa: E501

        If the run failed, the error message that was returned.  # noqa: E501

        :return: The error_message of this SingleJobRun.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this SingleJobRun.

        If the run failed, the error message that was returned.  # noqa: E501

        :param error_message: The error_message of this SingleJobRun.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def stdout(self):
        """Gets the stdout of this SingleJobRun.  # noqa: E501

        The text written to STDOUT as part of the job.  # noqa: E501

        :return: The stdout of this SingleJobRun.  # noqa: E501
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this SingleJobRun.

        The text written to STDOUT as part of the job.  # noqa: E501

        :param stdout: The stdout of this SingleJobRun.  # noqa: E501
        :type: str
        """

        self._stdout = stdout

    @property
    def stderr(self):
        """Gets the stderr of this SingleJobRun.  # noqa: E501

        The text written to STDERR as part of the job.  # noqa: E501

        :return: The stderr of this SingleJobRun.  # noqa: E501
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this SingleJobRun.

        The text written to STDERR as part of the job.  # noqa: E501

        :param stderr: The stderr of this SingleJobRun.  # noqa: E501
        :type: str
        """

        self._stderr = stderr

    @property
    def start_time(self):
        """Gets the start_time of this SingleJobRun.  # noqa: E501

        The date and time that the run started.  # noqa: E501

        :return: The start_time of this SingleJobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SingleJobRun.

        The date and time that the run started.  # noqa: E501

        :param start_time: The start_time of this SingleJobRun.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this SingleJobRun.  # noqa: E501

        The date and time that the run ended.  # noqa: E501

        :return: The end_time of this SingleJobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SingleJobRun.

        The date and time that the run ended.  # noqa: E501

        :param end_time: The end_time of this SingleJobRun.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def scheduled_start_time(self):
        """Gets the scheduled_start_time of this SingleJobRun.  # noqa: E501

        The date and time that the job should have run.  # noqa: E501

        :return: The scheduled_start_time of this SingleJobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_start_time

    @scheduled_start_time.setter
    def scheduled_start_time(self, scheduled_start_time):
        """Sets the scheduled_start_time of this SingleJobRun.

        The date and time that the job should have run.  # noqa: E501

        :param scheduled_start_time: The scheduled_start_time of this SingleJobRun.  # noqa: E501
        :type: datetime
        """

        self._scheduled_start_time = scheduled_start_time

    @property
    def schedule_diff_in_seconds(self):
        """Gets the schedule_diff_in_seconds of this SingleJobRun.  # noqa: E501

        The difference in seconds between when the job was scheduled to run and when it ran.  # noqa: E501

        :return: The schedule_diff_in_seconds of this SingleJobRun.  # noqa: E501
        :rtype: int
        """
        return self._schedule_diff_in_seconds

    @schedule_diff_in_seconds.setter
    def schedule_diff_in_seconds(self, schedule_diff_in_seconds):
        """Sets the schedule_diff_in_seconds of this SingleJobRun.

        The difference in seconds between when the job was scheduled to run and when it ran.  # noqa: E501

        :param schedule_diff_in_seconds: The schedule_diff_in_seconds of this SingleJobRun.  # noqa: E501
        :type: int
        """

        self._schedule_diff_in_seconds = schedule_diff_in_seconds

    @property
    def job_id(self):
        """Gets the job_id of this SingleJobRun.  # noqa: E501

        The job that the run is associated with.  # noqa: E501

        :return: The job_id of this SingleJobRun.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this SingleJobRun.

        The job that the run is associated with.  # noqa: E501

        :param job_id: The job_id of this SingleJobRun.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def created_at(self):
        """Gets the created_at of this SingleJobRun.  # noqa: E501

        The date and time that the run record was created in UTC.  # noqa: E501

        :return: The created_at of this SingleJobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SingleJobRun.

        The date and time that the run record was created in UTC.  # noqa: E501

        :param created_at: The created_at of this SingleJobRun.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SingleJobRun.  # noqa: E501

        The date and time that the run record was last updated in UTC.  # noqa: E501

        :return: The updated_at of this SingleJobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SingleJobRun.

        The date and time that the run record was last updated in UTC.  # noqa: E501

        :param updated_at: The updated_at of this SingleJobRun.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleJobRun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SingleJobRun):
            return True

        return self.to_dict() != other.to_dict()
