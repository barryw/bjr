# coding: utf-8

"""
    BJR API V1

    API specification for the BJR job server.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from bjr4py.configuration import Configuration


class AuthOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_token': 'str',
        'message': 'str',
        'is_error': 'bool',
        'status_code': 'int'
    }

    attribute_map = {
        'auth_token': 'auth_token',
        'message': 'message',
        'is_error': 'is_error',
        'status_code': 'status_code'
    }

    def __init__(self, auth_token=None, message=None, is_error=None, status_code=None, local_vars_configuration=None):  # noqa: E501
        """AuthOut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth_token = None
        self._message = None
        self._is_error = None
        self._status_code = None
        self.discriminator = None

        if auth_token is not None:
            self.auth_token = auth_token
        if message is not None:
            self.message = message
        if is_error is not None:
            self.is_error = is_error
        if status_code is not None:
            self.status_code = status_code

    @property
    def auth_token(self):
        """Gets the auth_token of this AuthOut.  # noqa: E501

        The JWT authentication token. This must be passed in the Authorization header on subsequent requests.  # noqa: E501

        :return: The auth_token of this AuthOut.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this AuthOut.

        The JWT authentication token. This must be passed in the Authorization header on subsequent requests.  # noqa: E501

        :param auth_token: The auth_token of this AuthOut.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    @property
    def message(self):
        """Gets the message of this AuthOut.  # noqa: E501

        If authentication failed, this will contain the reason why.  # noqa: E501

        :return: The message of this AuthOut.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuthOut.

        If authentication failed, this will contain the reason why.  # noqa: E501

        :param message: The message of this AuthOut.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def is_error(self):
        """Gets the is_error of this AuthOut.  # noqa: E501

        This will be true if the authentication was successful, and false if not.  # noqa: E501

        :return: The is_error of this AuthOut.  # noqa: E501
        :rtype: bool
        """
        return self._is_error

    @is_error.setter
    def is_error(self, is_error):
        """Sets the is_error of this AuthOut.

        This will be true if the authentication was successful, and false if not.  # noqa: E501

        :param is_error: The is_error of this AuthOut.  # noqa: E501
        :type: bool
        """

        self._is_error = is_error

    @property
    def status_code(self):
        """Gets the status_code of this AuthOut.  # noqa: E501

        The HTTP status code returned.  # noqa: E501

        :return: The status_code of this AuthOut.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this AuthOut.

        The HTTP status code returned.  # noqa: E501

        :param status_code: The status_code of this AuthOut.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthOut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthOut):
            return True

        return self.to_dict() != other.to_dict()
