# coding: utf-8

"""
    BJR API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobOut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'cron': 'str',
        'enabled': 'bool',
        'command': 'str',
        'next_run': 'str',
        'running': 'bool',
        'timezone': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'cron': 'cron',
        'enabled': 'enabled',
        'command': 'command',
        'next_run': 'next_run',
        'running': 'running',
        'timezone': 'timezone',
        'tags': 'tags'
    }

    def __init__(self, id=None, name=None, cron=None, enabled=None, command=None, next_run=None, running=None, timezone=None, tags=None):  # noqa: E501
        """JobOut - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._cron = None
        self._enabled = None
        self._command = None
        self._next_run = None
        self._running = None
        self._timezone = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if cron is not None:
            self.cron = cron
        if enabled is not None:
            self.enabled = enabled
        if command is not None:
            self.command = command
        if next_run is not None:
            self.next_run = next_run
        if running is not None:
            self.running = running
        if timezone is not None:
            self.timezone = timezone
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this JobOut.  # noqa: E501

        The unique id of the job.  # noqa: E501

        :return: The id of this JobOut.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobOut.

        The unique id of the job.  # noqa: E501

        :param id: The id of this JobOut.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JobOut.  # noqa: E501

        The name of the job.  # noqa: E501

        :return: The name of this JobOut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobOut.

        The name of the job.  # noqa: E501

        :param name: The name of this JobOut.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cron(self):
        """Gets the cron of this JobOut.  # noqa: E501

        The cron expression for the job.  # noqa: E501

        :return: The cron of this JobOut.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this JobOut.

        The cron expression for the job.  # noqa: E501

        :param cron: The cron of this JobOut.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def enabled(self):
        """Gets the enabled of this JobOut.  # noqa: E501

        Whether the job is enabled or not.  # noqa: E501

        :return: The enabled of this JobOut.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this JobOut.

        Whether the job is enabled or not.  # noqa: E501

        :param enabled: The enabled of this JobOut.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def command(self):
        """Gets the command of this JobOut.  # noqa: E501

        The command that is executed when the job fires.  # noqa: E501

        :return: The command of this JobOut.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this JobOut.

        The command that is executed when the job fires.  # noqa: E501

        :param command: The command of this JobOut.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def next_run(self):
        """Gets the next_run of this JobOut.  # noqa: E501

        The date and time of the job's next run.  # noqa: E501

        :return: The next_run of this JobOut.  # noqa: E501
        :rtype: str
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this JobOut.

        The date and time of the job's next run.  # noqa: E501

        :param next_run: The next_run of this JobOut.  # noqa: E501
        :type: str
        """

        self._next_run = next_run

    @property
    def running(self):
        """Gets the running of this JobOut.  # noqa: E501

        Whether the job is currently running.  # noqa: E501

        :return: The running of this JobOut.  # noqa: E501
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this JobOut.

        Whether the job is currently running.  # noqa: E501

        :param running: The running of this JobOut.  # noqa: E501
        :type: bool
        """

        self._running = running

    @property
    def timezone(self):
        """Gets the timezone of this JobOut.  # noqa: E501

        The timezone that the job will run in.  # noqa: E501

        :return: The timezone of this JobOut.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this JobOut.

        The timezone that the job will run in.  # noqa: E501

        :param timezone: The timezone of this JobOut.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def tags(self):
        """Gets the tags of this JobOut.  # noqa: E501

        An array of tags associated with the job.  # noqa: E501

        :return: The tags of this JobOut.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JobOut.

        An array of tags associated with the job.  # noqa: E501

        :param tags: The tags of this JobOut.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobOut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
