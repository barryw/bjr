---
openapi: 3.0.1
info:
  title: BJR API V1
  description: API specification for the BJR job server.
  version: v1
components:
  schemas:
    ServerVersion:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          type: string
          description: The BJR server version
    OccurrenceMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/DateTimeArray"
    TimezoneMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/StringArray"
    StringArray:
      type: array
      items:
        type: string
    DateTimeArray:
      type: array
      items:
        type: string
        format: date-time
    TagMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/TagArray"
    TagArray:
      type: array
      items:
        "$ref": "#/components/schemas/Tag"
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        taggings_count:
          type: integer
    SingleJobRunMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/SingleJobRun"
    JobRunArrayMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/JobRunArray"
    SingleJobRun:
      type: object
      properties:
        id:
          type: integer
          description: The object's primary key. This uniquely identifies the object
            in the system.
        success:
          type: boolean
          description: Whether the run was successful or not.
        return_code:
          type: integer
          description: The return code that the command exited with. 0 means success.
        error_message:
          type: string
          description: If the run failed, the error message that was returned.
          nullable: true
        stdout:
          type: string
          description: The text written to STDOUT as part of the job.
          nullable: true
        stderr:
          type: string
          description: The text written to STDERR as part of the job.
          nullable: true
        start_time:
          type: string
          format: date-time
          description: The date and time that the run started.
        end_time:
          type: string
          format: date-time
          description: The date and time that the run ended.
        job_id:
          type: integer
          description: The job that the run is associated with.
        created_at:
          type: string
          format: date-time
          description: The date and time that the run record was created in UTC.
        updated_at:
          type: string
          format: date-time
          description: The date and time that the run record was last updated in UTC.
    JobRunArray:
      type: array
      items:
        "$ref": "#/components/schemas/SingleJobRun"
    AuthIn:
      type: object
      properties:
        username:
          type: string
          description: The username of the user to authenticate as
        password:
          type: string
          description: The password of the user to authenticate as
      required:
      - username
      - password
    AuthOut:
      type: object
      properties:
        auth_token:
          type: string
          description: The JWT authentication token. This must be passed in the Authorization
            header on subsequent requests.
        message:
          type: string
          description: If authentication failed, this will contain the reason why.
        is_error:
          type: boolean
          description: This will be true if the authentication was successful, and
            false if not.
        status_code:
          type: integer
          description: The HTTP status code returned.
    UserNewIn:
      type: object
      properties:
        username:
          type: string
          description: The new user's username. Must be unique.
        password:
          type: string
          description: The new user's password.
        password_confirmation:
          type: string
          description: The new user's password confirmation. Must match 'password'.
      required:
      - username
      - password
      - password_confirmation
    UserUpdateIn:
      type: object
      properties:
        password:
          type: string
          description: The new user's password.
        password_confirmation:
          type: string
          description: The new user's password confirmation. Must match 'password'.
      required:
      - password
      - password_confirmation
    SingleUserMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/SingleUser"
    UserArrayMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/UserArray"
    SingleUser:
      type: object
      properties:
        id:
          type: integer
          description: The object's primary key. This uniquely identifies the object
            in the system.
        username:
          type: string
          description: The user' login name. Must be unique
        created_at:
          type: string
          format: date-time
          description: The UTC date and time that the object was created.
        updated_at:
          type: string
          format: date-time
          description: The UTC date and time that the object was last modified.
    UserArray:
      type: array
      items:
        "$ref": "#/components/schemas/SingleUser"
    SingleJobMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/SingleJob"
    JobArrayMessage:
      type: object
      properties:
        message:
          type: string
          description: The status message returned from the API call.
        is_error:
          type: boolean
          description: True if there was an error performing the API call.
        object_type:
          type: string
          description: The type of object being returned.
        status_code:
          type: integer
          description: The HTTP status code returned.
        object:
          "$ref": "#/components/schemas/JobArray"
    SingleJob:
      type: object
      properties:
        id:
          type: integer
          description: The object's primary key. This uniquely identifies the object
            in the system.
        name:
          type: string
          description: The name of the job.
        cron:
          type: string
          description: The cron expression for the job.
        enabled:
          type: boolean
          description: Whether the job is enabled or not.
        command:
          type: string
          description: The command that is executed when the job fires.
        next_run:
          type: string
          description: The date and time of the job's next run.
        running:
          type: boolean
          description: Whether the job is currently running.
        timezone:
          type: string
          description: The timezone that the job will run in.
        tags:
          type: array
          description: An array of tags associated with the job.
          items:
            type: string
            nullable: true
        created_at:
          type: string
          format: date-time
          description: The UTC date and time that the object was created.
        updated_at:
          type: string
          format: date-time
          description: The UTC date and time that the object was last modified.
        success_callback:
          type: string
          description: This url will receive a POST request with details about all
            successful job runs.
          nullable: true
        failure_callback:
          type: string
          description: This url will receive a POST request with details about all
            unsuccessful job runs.
          nullable: true
    JobArray:
      type: array
      items:
        "$ref": "#/components/schemas/SingleJob"
    JobIn:
      type: object
      properties:
        name:
          type: string
          description: The new name of the job. Must be unique.
        cron:
          type: string
          description: The new cron expression for the job.
        command:
          type: string
          description: The command to run when the job fires.
        timezone:
          type: string
          description: The timezone to run the job in.
        enabled:
          type: boolean
          description: Is the job enabled by default?
        tags:
          type: string
          description: A comma-separated list of tags to associate with this job.
            You can search jobs by their tags.
        success_callback:
          type: string
          description: Specify the url to receive a POST callback for all successful
            runs of this job.
        failure_callback:
          type: string
          description: Specify the url to receive a POST callback for all unsuccessful
            runs of this job.
      required:
      - name
      - cron
      - command
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT
paths:
  "/authenticate":
    post:
      summary: Authenticates a user and returns a token
      description: Authenticates a user and returns a token
      tags:
      - Authentication
      operationId: authenticateUser
      parameters: []
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthOut"
        '401':
          description: User failed authentication
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthOut"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthIn"
  "/job_api/{id}/occurrences/{end_date}":
    get:
      summary: Upcoming job occurrences
      description: Retrieves a list of upcoming occurrences for a job
      tags:
      - Jobs
      operationId: jobOccurrences
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the job to retrieve occurrences for
        schema:
          type: integer
      - name: end_date
        in: path
        required: true
        description: The date to retrieve occurrences up to
        schema:
          type: string
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Occurrences received successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OccurrenceMessage"
        '404':
          description: Job not found
          content: {}
  "/job_api":
    post:
      summary: Creates a job
      description: Creates a job
      tags:
      - Jobs
      operationId: createJob
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Job created successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleJobMessage"
        '403':
          description: A job with this name already exists.
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/JobIn"
    get:
      summary: Retrieves jobs
      description: Retrieves jobs
      tags:
      - Jobs
      operationId: getJobs
      security:
      - bearerAuth: []
      parameters:
      - name: tags
        in: query
        description: Specify a comma-separated list of tags to search jobs by.
        required: false
        schema:
          type: string
      - name: incexc
        in: query
        schema:
          type: string
          enum:
          - all
          - any
          - except
          description: How to handle the case where many tags are specified.
        required: false
      - name: start_date
        in: query
        description: Specify a start date to search jobs by.
        required: false
        schema:
          type: string
      - name: end_date
        in: query
        description: Specify an end date to search jobs by.
        required: false
        schema:
          type: string
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Jobs returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/JobArrayMessage"
  "/job_api/{id}/runs":
    get:
      summary: Retrieve the runs for a job
      description: Retrieve the runs for a job
      tags:
      - Jobs
      operationId: getJobRuns
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: page
        in: query
        required: false
        schema:
          type: integer
      - name: succeeded
        in: query
        required: false
        schema:
          type: boolean
      - name: start_date
        in: query
        required: false
        schema:
          type: string
      - name: end_date
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Runs received successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/JobRunArrayMessage"
  "/job_api/{id}":
    put:
      summary: Updates a single job
      description: Updates a single job
      tags:
      - Jobs
      operationId: updateJob
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Job updated successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleJobMessage"
        '403':
          description: Job could not be updated.
          content: {}
        '404':
          description: Job not found.
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/JobIn"
    delete:
      summary: Deletes a job
      description: Deletes a job
      tags:
      - Jobs
      operationId: deleteJob
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Job %{id} deleted successfully.
          content: {}
        '404':
          description: Job not found.
          content: {}
    get:
      summary: Retrieves a single job
      description: Retrieves a single job
      tags:
      - Jobs
      operationId: getJob
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Job returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleJobMessage"
        '404':
          description: Job not found.
          content: {}
  "/version":
    get:
      summary: Server version
      description: The BJR server version
      tags:
      - Static
      operationId: getVersion
      responses:
        '200':
          description: Server version received successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ServerVersion"
  "/timezones":
    get:
      summary: Get timezones
      description: Get the list of acceptable timezone names.
      tags:
      - Static
      operationId: getTimezones
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Timezones received successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TimezoneMessage"
  "/tags":
    get:
      summary: Get tags
      description: Retrieves the list of tags that are currently in use for the authenticated
        user.
      tags:
      - Static
      operationId: getTags
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Tags received successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TagMessage"
  "/user_api":
    get:
      summary: Retrieves users
      description: Get a list of users
      tags:
      - Users
      operationId: getUsers
      security:
      - bearerAuth: []
      parameters:
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserArrayMessage"
    post:
      summary: Creates a user
      description: Create a new user
      tags:
      - Users
      operationId: createUser
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
        '403':
          description: Username already exists
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserNewIn"
  "/user_api/{id}":
    put:
      summary: Update a single user
      description: Update a single user
      tags:
      - Users
      operationId: updateUser
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: The user was returned successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
        '403':
          description: The passwords did not match
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserUpdateIn"
    get:
      summary: Retrieve a single user
      description: Retrieve a single user
      tags:
      - Users
      operationId: getUser
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: The user was returned successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
        '404':
          description: The user with that id could not be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
        '401':
          description: Your token is invalid or expired
          content: {}
    delete:
      summary: Deletes a user
      description: Deletes a user
      tags:
      - Users
      operationId: deleteUser
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
        '403':
          description: You cannot delete yourself.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
        '404':
          description: The user with that id could not be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleUserMessage"
